# git_v8.py
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import subprocess
import os
import shutil
from datetime import datetime
import threading
import sys
import webbrowser
import json


class GitHubHelper:
    def __init__(self, root):
        self.root = root
        self.root.title("GitHub Helper - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        self.root.geometry("1400x900")  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 1400x700
        self.root.configure(bg='#f0f0f0')
        self.root.minsize(1200, 800)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.project_path = tk.StringVar()
        self.current_branch = tk.StringVar(value="–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        self.git_status = tk.StringVar(value="Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
        self.remote_info = tk.StringVar(value="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.user_info = tk.StringVar(value="–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        self.connection_status = tk.StringVar(value="‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã Git –∏–∑ JSON
        self.git_commands = self.load_git_commands()

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
        self.setup_scrollable_ui()

    def load_git_commands(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ Git –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        commands_file = "git_commands.json"
        default_commands = {
            "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã": {
                "git status": "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)",
                "git log --oneline -10": "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–º–º–∏—Ç–æ–≤",
                "git branch": "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ç–∫–∏",
                "git branch --show-current": "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É",
                "git remote -v": "–ü–æ–∫–∞–∑–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
            },
            "–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏": {
                "git add .": "–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å",
                "git add [filename]": "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å",
                "git reset HEAD [filename]": "–£–±—Ä–∞—Ç—å —Ñ–∞–π–ª –∏–∑ –∏–Ω–¥–µ–∫—Å–∞",
                "git checkout -- [filename]": "–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ",
                "git rm [filename]": "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            },
            "–ö–æ–º–º–∏—Ç—ã": {
                "git commit -m \"[message]\"": "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                "git commit --amend": "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç",
                "git reset --soft HEAD~1": "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç (–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)",
                "git reset --hard HEAD~1": "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç (—É–¥–∞–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)"
            },
            "–í–µ—Ç–∫–∏": {
                "git checkout -b [branch_name]": "–°–æ–∑–¥–∞—Ç—å –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ç–∫—É",
                "git checkout [branch_name]": "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É",
                "git merge [branch_name]": "–°–ª–∏—Ç—å –≤–µ—Ç–∫—É –≤ —Ç–µ–∫—É—â—É—é",
                "git branch -d [branch_name]": "–£–¥–∞–ª–∏—Ç—å –≤–µ—Ç–∫—É"
            },
            "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π": {
                "git fetch": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
                "git pull": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                "git push": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
                "git push --force-with-lease": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–±–µ–∑–æ–ø–∞—Å–Ω–∞—è)",
                "git push -u origin [branch]": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ç–∫—É –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
            },
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": {
                "git diff": "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö",
                "git diff --staged": "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω–¥–µ–∫—Å–µ",
                "git show": "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞",
                "git config --list": "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git"
            }
        }

        try:
            if os.path.exists(commands_file):
                with open(commands_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                with open(commands_file, 'w', encoding='utf-8') as f:
                    json.dump(default_commands, f, ensure_ascii=False, indent=2)
                return default_commands
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
            return default_commands

    def setup_scrollable_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill="both", expand=True, padx=10, pady=10)

        # PanedWindow –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –ª–µ–≤—É—é (–ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é) –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏
        main_pane = ttk.PanedWindow(main_container, orient=tk.HORIZONTAL)
        main_pane.pack(fill="both", expand=True)

        # –õ–ï–í–ê–Ø –ß–ê–°–¢–¨ ‚Äî —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        left_frame_outer = ttk.Frame(main_pane)
        main_pane.add(left_frame_outer, weight=3)

        # Canvas + Scrollbar –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(left_frame_outer, bg='#f0f0f0')
        scrollbar = ttk.Scrollbar(left_frame_outer, orient="vertical", command=canvas.yview)
        self.scrollable_frame = ttk.Frame(canvas)

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)
        right_frame = ttk.Frame(main_pane, padding="10")
        main_pane.add(right_frame, weight=1)

        # –¢–µ–ø–µ—Ä—å —Ä–∞–∑–º–µ—â–∞–µ–º UI –≤ scrollable_frame
        self.setup_ui_content(self.scrollable_frame, right_frame)

    def setup_ui_content(self, left_frame, right_frame):
        # --- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –õ–ï–í–û–ô –ß–ê–°–¢–ò ---
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(left_frame, text="üîß GitHub Helper - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤",
                                font=('Arial', 16, 'bold'))  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 18
        title_label.pack(pady=(0, 10))

        subtitle_label = ttk.Label(left_frame,
                                   text="–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git –∏ GitHub –±–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏",
                                   font=('Arial', 9), foreground="gray")
        subtitle_label.pack(pady=(0, 15))

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        system_frame = ttk.LabelFrame(left_frame, text="üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", padding="10")
        system_frame.pack(fill="x", pady=(0, 10))

        # Git —Å—Ç–∞—Ç—É—Å
        ttk.Label(system_frame, text="Git:", font=('Arial', 9, 'bold')).pack(anchor="w")
        git_status_frame = ttk.Frame(system_frame)
        git_status_frame.pack(fill="x", padx=(20, 0), pady=(0, 5))
        ttk.Label(git_status_frame, textvariable=self.git_status).pack(side="left")
        ttk.Button(git_status_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Git",
                   command=self.check_git_installation).pack(side="right")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ttk.Label(system_frame, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git:", font=('Arial', 9, 'bold')).pack(anchor="w", pady=(5, 0))
        user_status_frame = ttk.Frame(system_frame)
        user_status_frame.pack(fill="x", padx=(20, 0), pady=(0, 5))
        ttk.Label(user_status_frame, textvariable=self.user_info).pack(side="left")
        ttk.Button(user_status_frame, text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å",
                   command=self.setup_git_user).pack(side="right", padx=(5, 0))

        ttk.Button(system_frame, text="üÜò –ü–æ–º–æ—â—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
                   command=self.show_beginner_help).pack(anchor="w", pady=(5, 0))

        # 2. –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        project_frame = ttk.LabelFrame(left_frame, text="üìÅ 2. –í—ã–±–æ—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ", padding="10")
        project_frame.pack(fill="x", pady=(0, 10))

        ttk.Label(project_frame, text="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É:").pack(anchor="w")
        entry_frame = ttk.Frame(project_frame)
        entry_frame.pack(fill="x", pady=(2, 5))
        ttk.Entry(entry_frame, textvariable=self.project_path,
                  font=('Arial', 9)).pack(side="left", fill="x", expand=True, padx=(0, 5))
        ttk.Button(entry_frame, text="–í—ã–±—Ä–∞—Ç—å",
                   command=self.select_project_folder).pack(side="right")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        info_frame = ttk.Frame(project_frame)
        info_frame.pack(fill="x", pady=(5, 0))

        ttk.Label(info_frame, text="–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:", width=18).grid(row=0, column=0, sticky="w", pady=1)
        ttk.Label(info_frame, textvariable=self.current_branch).grid(row=0, column=1, sticky="w", padx=(5, 0))

        ttk.Label(info_frame, text="–£–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:", width=18).grid(row=1, column=0, sticky="w", pady=1)
        ttk.Label(info_frame, textvariable=self.remote_info, wraplength=300).grid(row=1, column=1, sticky="w",
                                                                                  padx=(5, 0))

        ttk.Label(info_frame, text="–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", width=18).grid(row=2, column=0, sticky="w", pady=1)
        self.connection_label = ttk.Label(info_frame, textvariable=self.connection_status)
        self.connection_label.grid(row=2, column=1, sticky="w", padx=(5, 0))

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(project_frame)
        btn_frame.pack(fill="x", pady=(10, 0))
        ttk.Button(btn_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", command=self.check_project).pack(side="left", padx=(0, 5))
        ttk.Button(btn_frame, text="üÜï –°–æ–∑–¥–∞—Ç—å", command=self.init_repository).pack(side="left", padx=(0, 5))
        ttk.Button(btn_frame, text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å", command=self.setup_remote_repository).pack(side="left")

        # 3. –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤
        status_frame = ttk.LabelFrame(left_frame, text="üìã 3. –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞", padding="10")
        status_frame.pack(fill="both", expand=True, pady=(0, 10))

        header = ttk.Frame(status_frame)
        header.pack(fill="x", pady=(0, 5))
        ttk.Button(header, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.update_file_status).pack(side="left")
        ttk.Label(header, text="üí° –°–æ–≤–µ—Ç: –∑–µ–ª—ë–Ω—ã–µ ‚Äî –≥–æ—Ç–æ–≤—ã, –∫—Ä–∞—Å–Ω—ã–µ ‚Äî –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è",
                  foreground="gray", font=('Arial', 8)).pack(side="right")

        tree_frame = ttk.Frame(status_frame)
        tree_frame.pack(fill="both", expand=True)

        self.file_tree = ttk.Treeview(tree_frame, columns=('status', 'description'), height=5)
        self.file_tree.heading('#0', text='–§–∞–π–ª')
        self.file_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        self.file_tree.heading('description', text='–û–ø–∏—Å–∞–Ω–∏–µ')
        self.file_tree.column('#0', width=300)
        self.file_tree.column('status', width=100)
        self.file_tree.column('description', width=200)

        tree_scroll = ttk.Scrollbar(tree_frame, orient="vertical", command=self.file_tree.yview)
        self.file_tree.configure(yscrollcommand=tree_scroll.set)

        self.file_tree.pack(side="left", fill="both", expand=True)
        tree_scroll.pack(side="right", fill="y")

        # 4. –ö–æ–º–º–∏—Ç
        commit_frame = ttk.LabelFrame(left_frame, text="üíæ 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π", padding="10")
        commit_frame.pack(fill="x", pady=(0, 10))

        ttk.Label(commit_frame,
                  text="–ö–æ–º–º–∏—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                  foreground="blue", font=('Arial', 9)).pack(anchor="w", pady=(0, 5))

        ttk.Label(commit_frame, text="–û–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:", font=('Arial', 9, 'bold')).pack(anchor="w")

        comment_frame = ttk.Frame(commit_frame)
        comment_frame.pack(fill="x", pady=(2, 5))

        self.commit_text = tk.Text(comment_frame, height=2, width=40, wrap=tk.WORD, font=('Arial', 9))
        self.commit_text.pack(side="left", fill="x", expand=True, padx=(0, 5))

        btns = ttk.Frame(comment_frame)
        btns.pack(side="right", fill="y")
        ttk.Button(btns, text="‚ú®", width=6, command=self.auto_fill_commit_message).pack(pady=(0, 2))
        ttk.Button(btns, text="üóëÔ∏è", width=6, command=lambda: self.commit_text.delete(1.0, tk.END)).pack()

        ttk.Label(commit_frame,
                  text="üí° –ü—Ä–∏–º–µ—Ä: '–ò—Å–ø—Ä–∞–≤–∏–ª –æ—à–∏–±–∫—É', '–î–æ–±–∞–≤–∏–ª —Ñ–æ—Ä–º—É'",
                  foreground="gray", font=('Arial', 8)).pack(anchor="w")

        commit_btns = ttk.Frame(commit_frame)
        commit_btns.pack(fill="x", pady=(10, 0))
        ttk.Button(commit_btns, text="üíæ –¢–µ–∫—É—â–∏–π", command=self.commit_selected_file).pack(side="left", padx=(0, 5))
        ttk.Button(commit_btns, text="üíæ –í—Å–µ", command=self.commit_all_changes).pack(side="left", padx=(0, 5))
        ttk.Button(commit_btns, text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.push_to_github).pack(side="left")

        # 5. –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø: –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏
        manual_frame = ttk.LabelFrame(left_frame, text="‚å®Ô∏è 5. –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ Git", padding="10")
        manual_frame.pack(fill="x", pady=(0, 10))

        ttk.Label(manual_frame,
                  text="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ Git –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                  foreground="blue", font=('Arial', 9)).pack(anchor="w", pady=(0, 10))

        # –í—ã–±–æ—Ä –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        preset_frame = ttk.LabelFrame(manual_frame, text="üìö –ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã", padding="10")
        preset_frame.pack(fill="x", pady=(0, 10))

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        ttk.Label(preset_frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").pack(anchor="w")
        self.command_category = ttk.Combobox(preset_frame, values=list(self.git_commands.keys()), state="readonly")
        self.command_category.pack(fill="x", pady=(2, 5))
        self.command_category.bind("<<ComboboxSelected>>", self.update_command_list)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        ttk.Label(preset_frame, text="–ö–æ–º–∞–Ω–¥–∞:").pack(anchor="w")
        self.command_preset = ttk.Combobox(preset_frame, state="readonly")
        self.command_preset.pack(fill="x", pady=(2, 5))
        self.command_preset.bind("<<ComboboxSelected>>", self.update_command_description)

        # –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        ttk.Label(preset_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:").pack(anchor="w")
        self.command_description = ttk.Label(preset_frame, text="", foreground="gray",
                                             font=('Arial', 9), wraplength=400)
        self.command_description.pack(anchor="w", pady=(2, 5))

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        ttk.Button(preset_frame, text="‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É",
                   command=self.execute_preset_command).pack(anchor="w", pady=(5, 0))

        # –ü–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        manual_input_frame = ttk.LabelFrame(manual_frame, text="‚úèÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã", padding="10")
        manual_input_frame.pack(fill="x", pady=(0, 10))

        ttk.Label(manual_input_frame, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É Git:").pack(anchor="w")

        input_frame = ttk.Frame(manual_input_frame)
        input_frame.pack(fill="x", pady=(2, 5))

        self.manual_command = ttk.Entry(input_frame, font=('Consolas', 9))
        self.manual_command.pack(side="left", fill="x", expand=True, padx=(0, 5))
        self.manual_command.bind('<Return>', lambda e: self.execute_manual_command())

        ttk.Button(input_frame, text="‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å",
                   command=self.execute_manual_command).pack(side="right")

        ttk.Label(manual_input_frame,
                  text="üí° –ü—Ä–∏–º–µ—Ä: git log --graph --oneline",
                  foreground="gray", font=('Arial', 8)).pack(anchor="w")

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        quick_buttons_frame = ttk.LabelFrame(manual_frame, text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", padding="10")
        quick_buttons_frame.pack(fill="x")

        quick_btn_row1 = ttk.Frame(quick_buttons_frame)
        quick_btn_row1.pack(fill="x", pady=(0, 5))

        ttk.Button(quick_btn_row1, text="üìä Status",
                   command=lambda: self.execute_command("git status")).pack(side="left", padx=(0, 5))
        ttk.Button(quick_btn_row1, text="üìã Log",
                   command=lambda: self.execute_command("git log --oneline -10")).pack(side="left", padx=(0, 5))
        ttk.Button(quick_btn_row1, text="üåø Branches",
                   command=lambda: self.execute_command("git branch")).pack(side="left", padx=(0, 5))
        ttk.Button(quick_btn_row1, text="üîÑ Fetch",
                   command=lambda: self.execute_command("git fetch")).pack(side="left")

        quick_btn_row2 = ttk.Frame(quick_buttons_frame)
        quick_btn_row2.pack(fill="x")

        ttk.Button(quick_btn_row2, text="üì• Pull",
                   command=lambda: self.execute_command("git pull")).pack(side="left", padx=(0, 5))
        ttk.Button(quick_btn_row2, text="üì§ Push",
                   command=lambda: self.execute_command("git push")).pack(side="left", padx=(0, 5))
        ttk.Button(quick_btn_row2, text="üîç Diff",
                   command=lambda: self.execute_command("git diff")).pack(side="left", padx=(0, 5))
        ttk.Button(quick_btn_row2, text="‚ÑπÔ∏è Config",
                   command=lambda: self.execute_command("git config --list")).pack(side="left")

        # --- –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨: –ö–æ–Ω—Å–æ–ª—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ---
        console_frame = ttk.LabelFrame(right_frame, text="üì∫ –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π", padding="10")
        console_frame.pack(fill="both", expand=True)

        self.console = scrolledtext.ScrolledText(console_frame, height=24,
                                                 wrap=tk.WORD, state=tk.NORMAL,
                                                 font=('Consolas', 9))
        self.console.pack(fill="both", expand=True, pady=(0, 10))

        self.console.tag_configure('command', foreground='blue', font=('Consolas', 9, 'bold'))
        self.console.tag_configure('success', foreground='green')
        self.console.tag_configure('error', foreground='red')
        self.console.tag_configure('info', foreground='orange')

        self.setup_console_bindings()

        ttk.Button(console_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_console).pack(side="left")
        ttk.Label(console_frame, text="Ctrl+C ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", foreground="gray", font=('Arial', 8)).pack(side="left",
                                                                                                        padx=5)

        self.log_message("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GitHub Helper!", 'info')
        self.log_message("–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.", 'info')

    def update_command_list(self, event=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category = self.command_category.get()
        if category and category in self.git_commands:
            commands = list(self.git_commands[category].keys())
            self.command_preset.config(values=commands)
            self.command_preset.set("")
            self.command_description.config(text="")

    def update_command_description(self, event=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–º–∞–Ω–¥—ã"""
        category = self.command_category.get()
        command = self.command_preset.get()
        if category and command and category in self.git_commands:
            if command in self.git_commands[category]:
                description = self.git_commands[category][command]
                self.command_description.config(text=description)

    def execute_preset_command(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—É"""
        command = self.command_preset.get()
        if not command:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥–µ
        if "[filename]" in command or "[message]" in command or "[branch" in command:
            self.show_command_template_dialog(command)
        else:
            self.execute_command(command)

    def show_command_template_dialog(self, command_template):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã"""
        template_window = tk.Toplevel(self.root)
        template_window.title("üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã")
        template_window.geometry("500x400")
        template_window.transient(self.root)
        template_window.grab_set()

        main_frame = ttk.Frame(template_window, padding="20")
        main_frame.pack(fill="both", expand=True)

        ttk.Label(main_frame, text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã",
                  font=('Arial', 12, 'bold')).pack(pady=(0, 15))

        ttk.Label(main_frame, text=f"–ö–æ–º–∞–Ω–¥–∞: {command_template}",
                  font=('Consolas', 10), background='#f0f0f0').pack(pady=(0, 15))

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = {}
        entries = {}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        if "[filename]" in command_template:
            ttk.Label(main_frame, text="–ò–º—è —Ñ–∞–π–ª–∞:", font=('Arial', 10, 'bold')).pack(anchor="w")
            entries['filename'] = ttk.Entry(main_frame, font=('Arial', 10), width=40)
            entries['filename'].pack(fill="x", pady=(2, 10))

        if "[message]" in command_template:
            ttk.Label(main_frame, text="–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:", font=('Arial', 10, 'bold')).pack(anchor="w")
            entries['message'] = ttk.Entry(main_frame, font=('Arial', 10), width=40)
            entries['message'].pack(fill="x", pady=(2, 10))

        if "[branch_name]" in command_template or "[branch]" in command_template:
            ttk.Label(main_frame, text="–ò–º—è –≤–µ—Ç–∫–∏:", font=('Arial', 10, 'bold')).pack(anchor="w")
            entries['branch'] = ttk.Entry(main_frame, font=('Arial', 10), width=40)
            entries['branch'].pack(fill="x", pady=(2, 10))

        # –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞
        result_frame = ttk.LabelFrame(main_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç", padding="10")
        result_frame.pack(fill="x", pady=(10, 15))

        result_var = tk.StringVar(value=command_template)
        result_label = ttk.Label(result_frame, textvariable=result_var,
                                 font=('Consolas', 9), background='white')
        result_label.pack(fill="x")

        def update_result(*args):
            """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
            result = command_template
            for key, entry in entries.items():
                if key == 'filename':
                    result = result.replace("[filename]", entry.get() or "[filename]")
                elif key == 'message':
                    result = result.replace("[message]", entry.get() or "[message]")
                elif key == 'branch':
                    result = result.replace("[branch_name]", entry.get() or "[branch_name]")
                    result = result.replace("[branch]", entry.get() or "[branch]")
            result_var.set(result)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ –ø–æ–ª—è—Ö
        for entry in entries.values():
            entry.bind('<KeyRelease>', update_result)

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill="x", pady=(10, 0))

        def execute_filled_command():
            final_command = result_var.get()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if "[" in final_command and "]" in final_command:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã!")
                return

            template_window.destroy()
            self.execute_command(final_command)

        ttk.Button(buttons_frame, text="‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å", command=execute_filled_command).pack(side="right")
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=template_window.destroy).pack(side="right", padx=(0, 10))

        # –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
        if entries:
            list(entries.values())[0].focus()

    def execute_manual_command(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, –≤–≤–µ–¥–µ–Ω–Ω—É—é –≤—Ä—É—á–Ω—É—é"""
        command = self.manual_command.get().strip()
        if not command:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å git
        if not command.startswith('git'):
            result = messagebox.askyesno("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                         f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'git': {command}\n\n–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—ë –≤—Å—ë —Ä–∞–≤–Ω–æ?")
            if not result:
                return

        self.execute_command(command)
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.manual_command.delete(0, tk.END)

    def execute_command(self, command):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ª—é–±–æ–π git –∫–æ–º–∞–Ω–¥—ã"""
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        self.log_message(f"‚å®Ô∏è –†–£–ß–ù–ê–Ø –ö–û–ú–ê–ù–î–ê: {command}", 'info')

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ push
        if command.startswith('git push') and not '--force' in command:
            self._handle_push_with_conflict_detection(command)
        else:
            success, output = self.run_git_command(command)
            if success:
                self.log_message("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.", 'success')
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                self.update_project_info_after_command(command)
            else:
                self.log_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.", 'error')

    def _handle_push_with_conflict_detection(self, push_command):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É push —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        self.log_message("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π...", 'info')

        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º fetch –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        fetch_success, _ = self.run_git_command("git fetch", False)
        if not fetch_success:
            self.log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞", 'error')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_success, status_output = self.run_git_command("git status", False)
        if status_success and ("behind" in status_output or "diverged" in status_output):
            self.log_message("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã! –£–¥–∞–ª–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.", 'error')
            self._show_conflict_resolution_dialog(push_command)
            return

        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π push
        success, output = self.run_git_command(push_command)
        if not success and ("rejected" in output or "non-fast-forward" in output):
            self.log_message("‚ùå Push –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤", 'error')
            self._show_conflict_resolution_dialog(push_command)
        elif success:
            self.log_message("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", 'success')

    def _show_conflict_resolution_dialog(self, original_push_command):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        conflict_window = tk.Toplevel(self.root)
        conflict_window.title("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç")
        conflict_window.geometry("600x400")
        conflict_window.transient(self.root)
        conflict_window.grab_set()

        main_frame = ttk.Frame(conflict_window, padding="20")
        main_frame.pack(fill="both", expand=True)

        ttk.Label(main_frame, text="‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                  font=('Arial', 14, 'bold'), foreground='red').pack(pady=(0, 15))

        info_text = ("–£–¥–∞–ª–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É –≤–∞—Å –ª–æ–∫–∞–ª—å–Ω–æ.\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ —Ä–µ—à–µ–Ω–∏—è:")
        ttk.Label(main_frame, text=info_text, wraplength=500).pack(pady=(0, 20))

        # –û–ø—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è
        options_frame = ttk.LabelFrame(main_frame, text="–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è", padding="15")
        options_frame.pack(fill="x", pady=(0, 20))

        def safe_pull():
            conflict_window.destroy()
            self.log_message("üì• –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...", 'info')
            current_branch = self.current_branch.get().replace("‚úÖ ", "").strip()
            success, output = self.run_git_command(f"git pull origin {current_branch}")
            if success:
                self.log_message("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–Ω–æ–≤–∞.", 'success')
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {output}", 'error')

        def force_push():
            result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                         "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —á—É–∂–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
            if result:
                conflict_window.destroy()
                force_command = original_push_command.replace("git push", "git push --force-with-lease")
                self.log_message("üö® –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É...", 'info')
                success, output = self.run_git_command(force_command)
                if success:
                    self.log_message("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", 'success')
                else:
                    self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {output}", 'error')

        ttk.Button(options_frame, text="üì• –ë–µ–∑–æ–ø–∞—Å–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è (git pull)",
                   command=safe_pull, width=50).pack(pady=(0, 10))

        ttk.Button(options_frame, text="üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ: –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é –≤–µ—Ç–∫—É (--force-with-lease)",
                   command=force_push, width=50).pack(pady=(0, 10))

        ttk.Button(options_frame, text="‚ùå –û—Ç–º–µ–Ω–∞",
                   command=conflict_window.destroy, width=50).pack()

    def update_project_info_after_command(self, command):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        update_commands = ['checkout', 'branch', 'commit', 'pull', 'push', 'merge', 'remote']

        if any(cmd in command for cmd in update_commands):
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.root.after(500, self._delayed_project_update)

    def _delayed_project_update(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        self.check_project()

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def setup_console_bindings(self):
        self.context_menu = tk.Menu(self.console, tearoff=0)
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_selection_menu)
        self.context_menu.add_command(label="‚úÖ –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", command=self.select_all_menu)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_console)
        self.console.bind("<Button-3>", self.show_context_menu)
        self.console.bind("<Control-c>", self.copy_selection)
        self.console.bind("<Control-a>", self.select_all)
        self.console.bind("<Key>", self.on_console_key_press)

    def on_console_key_press(self, event):
        allowed_keys = ['Control_L', 'Control_R', 'c', 'C', 'a', 'A',
                        'Left', 'Right', 'Up', 'Down', 'Home', 'End',
                        'Prior', 'Next', 'Shift_L', 'Shift_R']
        if event.keysym not in allowed_keys:
            return "break"

    def show_context_menu(self, event):
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()

    def copy_selection(self, event=None):
        try:
            selected_text = self.console.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
        except tk.TclError:
            pass
        return "break"

    def copy_selection_menu(self):
        try:
            selected_text = self.console.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
        except tk.TclError:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    def select_all(self, event=None):
        self.console.tag_add(tk.SEL, "1.0", tk.END)
        self.console.mark_set(tk.INSERT, "1.0")
        self.console.see(tk.INSERT)
        return "break"

    def select_all_menu(self):
        self.console.tag_add(tk.SEL, "1.0", tk.END)
        self.console.mark_set(tk.INSERT, "1.0")
        self.console.see(tk.INSERT)

    def log_message(self, message, msg_type='normal'):
        timestamp = datetime.now().strftime("%H:%M:%S")
        if msg_type == 'command':
            self.console.insert(tk.END, f"\nüîß –ö–û–ú–ê–ù–î–ê: {message}\n", 'command')
        elif msg_type == 'success':
            self.console.insert(tk.END, f"[{timestamp}] ‚úÖ {message}\n", 'success')
        elif msg_type == 'error':
            self.console.insert(tk.END, f"[{timestamp}] ‚ùå {message}\n", 'error')
        elif msg_type == 'info':
            self.console.insert(tk.END, f"[{timestamp}] ‚ÑπÔ∏è {message}\n", 'info')
        else:
            self.console.insert(tk.END, f"[{timestamp}] {message}\n")
        self.console.see(tk.END)
        self.root.update_idletasks()

    def clear_console(self):
        self.console.delete(1.0, tk.END)
        self.log_message("–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω", 'info')

    def run_git_command(self, command, show_command=True):
        if show_command:
            self.log_message(command, 'command')
        try:
            if self.project_path.get():
                os.chdir(self.project_path.get())
            result = subprocess.run(command, shell=True, capture_output=True,
                                    text=True, encoding='utf-8')
            if result.returncode == 0:
                if result.stdout.strip():
                    self.log_message(result.stdout.strip(), 'success')
                return True, result.stdout.strip()
            else:
                error_msg = result.stderr.strip()
                if not error_msg:
                    error_msg = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                self.log_message(error_msg, 'error')
                return False, error_msg
        except Exception as e:
            self.log_message(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}", 'error')
            return False, str(e)

    def check_git_installation(self):
        self.log_message("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´", 'info')
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Git –≤ —Å–∏—Å—Ç–µ–º–µ...", 'info')
        success, output = self.run_git_command("git --version")
        if success:
            self.git_status.set(f"‚úÖ {output}")
            self.log_message("Git –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", 'success')
            self.check_git_user()
        else:
            self.git_status.set("‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.log_message("Git –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞.", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –°–∫–∞—á–∞–π—Ç–µ Git —Å https://git-scm.com/", 'info')

    def check_git_user(self):
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git...", 'info')
        success_name, name = self.run_git_command("git config --global user.name", False)
        success_email, email = self.run_git_command("git config --global user.email", False)
        if success_name and success_email and name and email:
            self.user_info.set(f"‚úÖ {name} ({email})")
            self.log_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {name} ({email})", 'success')
        else:
            self.user_info.set("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.log_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'", 'info')

    def setup_git_user(self):
        setup_window = tk.Toplevel(self.root)
        setup_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git")
        setup_window.geometry("400x300")
        setup_window.transient(self.root)
        setup_window.grab_set()
        setup_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))
        main_frame = ttk.Frame(setup_window, padding="20")
        main_frame.pack(fill="both", expand=True)

        ttk.Label(main_frame, text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git",
                  font=('Arial', 14, 'bold')).pack(pady=(0, 20))

        info_text = ("Git –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ –∏–º—è –∏ email –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫–æ–º–º–∏—Ç–æ–≤. "
                     "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        ttk.Label(main_frame, text=info_text, wraplength=350,
                  justify="left", foreground="gray").pack(pady=(0, 20))

        ttk.Label(main_frame, text="–í–∞—à–µ –∏–º—è:", font=('Arial', 10, 'bold')).pack(anchor="w")
        name_entry = ttk.Entry(main_frame, font=('Arial', 11), width=30)
        name_entry.pack(fill="x", pady=(5, 15))

        ttk.Label(main_frame, text="–í–∞—à email:", font=('Arial', 10, 'bold')).pack(anchor="w")
        email_entry = ttk.Entry(main_frame, font=('Arial', 11), width=30)
        email_entry.pack(fill="x", pady=(5, 20))

        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill="x", pady=(10, 0))

        def save_user():
            name = name_entry.get().strip()
            email = email_entry.get().strip()
            if not name or not email:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            success1, _ = self.run_git_command(f'git config --global user.name "{name}"')
            success2, _ = self.run_git_command(f'git config --global user.email "{email}"')
            if success1 and success2:
                self.user_info.set(f"‚úÖ {name} ({email})")
                self.log_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {name} ({email})", 'success')
                setup_window.destroy()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_user).pack(side="right")
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=setup_window.destroy).pack(side="right", padx=(0, 10))
        name_entry.focus()

    def show_beginner_help(self):
        help_window = tk.Toplevel(self.root)
        help_window.title("üÜò –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö")
        help_window.geometry("600x500")
        help_text = scrolledtext.ScrolledText(help_window, wrap=tk.WORD, padx=10, pady=10)
        help_text.pack(fill="both", expand=True)

        help_content = """
üÜò –°–ü–†–ê–í–ö–ê –î–õ–Ø –ù–ê–ß–ò–ù–ê–Æ–©–ò–•

üìö –ß–¢–û –¢–ê–ö–û–ï GIT –ò GITHUB?
Git ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π. –û–Ω–∞ –ø–æ–º–æ–≥–∞–µ—Ç:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–∞–¥ –æ–¥–Ω–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º
‚Ä¢ –û—Ç–∫–∞—Ç—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ (–≤–µ—Ç–∫–∏) –ø—Ä–æ–µ–∫—Ç–∞

GitHub ‚Äî —ç—Ç–æ –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.

üîÑ –û–°–ù–û–í–ù–û–ô –†–ê–ë–û–ß–ò–ô –ü–†–û–¶–ï–°–°:
1. –ò–∑–º–µ–Ω—è–µ—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
2. –î–æ–±–∞–≤–ª—è–µ—Ç–µ –∏—Ö –≤ "–∏–Ω–¥–µ–∫—Å" (git add)
3. –°–æ–∑–¥–∞–µ—Ç–µ "–∫–æ–º–º–∏—Ç" ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (git commit)
4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–∞ GitHub (git push)

‚öôÔ∏è –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è –∏ email)
3. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ GitHub.com
4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
5. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –Ω–∞ GitHub

üõ†Ô∏è –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
‚Ä¢ –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ª—é–±—ã—Ö Git –∫–æ–º–∞–Ω–¥
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ push

üí° –ü–û–õ–ï–ó–ù–´–ï –°–û–í–ï–¢–´:
‚Ä¢ –î–µ–ª–∞–π—Ç–µ –∫–æ–º–º–∏—Ç—ã —á–∞—Å—Ç–æ –∏ —Å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
‚Ä¢ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ git pull –ø–µ—Ä–µ–¥ git push
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–µ—Ç–∫–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤

‚ùì –ï–°–õ–ò –ß–¢–û-–¢–û –ü–û–®–õ–û –ùE –¢–ê–ö:
‚Ä¢ git status ‚Äî –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
‚Ä¢ git log ‚Äî –ø–æ–∫–∞–∂–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤  
‚Ä¢ git reset ‚Äî –æ—Ç–º–µ–Ω–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ
        """

        help_text.insert(tk.END, help_content)
        help_text.configure(state=tk.DISABLED)
        close_button = ttk.Button(help_window, text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", command=help_window.destroy)
        close_button.pack(pady=10)

    def select_project_folder(self):
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º")
        if folder:
            self.project_path.set(folder)
            self.log_message(f"üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}", 'info')
            self.check_project()

    def check_project(self):
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        self.log_message("üìã –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê", 'info')
        self.log_message("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É...", 'info')

        success, output = self.run_git_command("git status", False)
        if success:
            self.log_message("‚úÖ –≠—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", 'success')

            success, branch = self.run_git_command("git branch --show-current", False)
            if success and branch:
                self.current_branch.set(f"‚úÖ {branch}")
                self.log_message(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {branch}", 'info')

            self.check_remote_repository()
            self.update_file_status()
        else:
            self.current_branch.set("‚ùå –ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
            self.remote_info.set("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.connection_status.set("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.log_message("‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π' –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", 'info')

    def check_remote_repository(self):
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é...", 'info')
        success, output = self.run_git_command("git remote -v", False)
        if success and output.strip():
            lines = output.strip().split('\n')
            origins = [line for line in lines if 'origin' in line and '(fetch)' in line]
            if origins:
                remote_url = origins[0].split('\t')[1].split(' ')[0]
                self.remote_info.set(f"‚úÖ {remote_url}")
                self.connection_status.set("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω")
                self.log_message(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫: {remote_url}", 'success')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
                self.test_remote_connection()
            else:
                self.remote_info.set("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                self.connection_status.set("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                self.log_message("–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", 'error')
        else:
            self.remote_info.set("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.connection_status.set("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.log_message("–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ GitHub'", 'info')

    def test_remote_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"""
        self.log_message("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å GitHub...", 'info')
        success, output = self.run_git_command("git ls-remote --heads origin", False)
        if success:
            self.connection_status.set("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.log_message("‚úÖ –°–≤—è–∑—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!", 'success')
        else:
            self.connection_status.set("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
            self.log_message("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é", 'error')
            if "authentication" in output.lower() or "denied" in output.lower():
                self.log_message("üí° –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH/Token", 'info')

    def push_to_github(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if "–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω" in self.connection_status.get().lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in self.connection_status.get().lower():
            self.log_message("‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...", 'error')
            self.setup_remote_repository()
            return

        self.log_message("üöÄ –û–¢–ü–†–ê–í–ö–ê –ù–ê GITHUB", 'info')
        self.log_message("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", 'info')

        # –ó–∞–ø—É—Å–∫–∞–µ–º push –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        threading.Thread(target=self._run_push).start()

    def _run_push(self):
        current_branch = self.current_branch.get().replace("‚úÖ ", "").strip()
        command = f"git push -u origin {current_branch}"
        self._handle_push_with_conflict_detection(command)


    def setup_remote_repository(self):
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        setup_window = tk.Toplevel(self.root)
        setup_window.title("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub")
        setup_window.geometry("650x600")
        setup_window.transient(self.root)
        setup_window.grab_set()
        setup_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))

        main_frame = ttk.Frame(setup_window, padding="20")
        main_frame.pack(fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(main_frame, text="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub",
                  font=('Arial', 14, 'bold')).pack(pady=(0, 20))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_text = ("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥ –Ω–∞ GitHub, –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π\n"
                     "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –Ω–∞ GitHub.")
        ttk.Label(main_frame, text=info_text, wraplength=500,
                  justify="left", foreground="gray").pack(pady=(0, 20))

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction_frame = ttk.LabelFrame(main_frame, text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", padding="15")
        instruction_frame.pack(fill="x", pady=(0, 20))

        instruction_text = ("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ GitHub.com\n"
                            "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (New repository)\n"
                            "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n"
                            "4. –í—Å—Ç–∞–≤—å—Ç–µ URL –≤ –ø–æ–ª–µ –Ω–∏–∂–µ\n"
                            "5. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'")
        ttk.Label(instruction_frame, text=instruction_text,
                  justify="left").pack(anchor="w", pady=(0, 10))

        ttk.Button(instruction_frame, text="üåê –û—Ç–∫—Ä—ã—Ç—å GitHub.com",
                   command=lambda: webbrowser.open("https://github.com/new")).pack(anchor="w")

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ URL
        ttk.Label(main_frame, text="URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub:",
                  font=('Arial', 10, 'bold')).pack(anchor="w")
        url_frame = ttk.Frame(main_frame)
        url_frame.pack(fill="x", pady=(5, 10))
        url_entry = ttk.Entry(url_frame, font=('Arial', 10))
        url_entry.pack(fill="x")

        # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –ø—Ä–∏–º–µ—Ä–æ–º
        example_url = "https://github.com/username/repository.git"
        url_entry.insert(0, example_url)

        ttk.Label(main_frame,
                  text="üí° –ü—Ä–∏–º–µ—Ä: https://github.com/unijohnson18/test_reclama.git",
                  foreground="gray", font=('Arial', 9)).pack(anchor="w", pady=(0, 15))

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –æ–∫–Ω–µ
        status_frame = ttk.LabelFrame(main_frame, text="üîç –°—Ç–∞—Ç—É—Å", padding="10")
        status_frame.pack(fill="x", pady=(0, 20))

        status_var = tk.StringVar(value="–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        status_label = ttk.Label(status_frame, textvariable=status_var, foreground="orange")
        status_label.pack(anchor="w")

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill="x", pady=(10, 0))

        def connect_repository():
            url = url_entry.get().strip()
            if not url or url == example_url:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!")
                return

            status_var.set("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            setup_window.update()

            self.log_message(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: {url}", 'info')

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            self.run_git_command("git remote remove origin", False)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            success, output = self.run_git_command(f'git remote add origin "{url}"')
            if success:
                status_var.set("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!")
                self.log_message("‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!", 'success')

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                self.remote_info.set(f"‚úÖ {url}")
                self.connection_status.set("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω")

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
                self.root.after(2000, lambda: self._suggest_first_push(setup_window))
            else:
                status_var.set("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {output}", 'error')
                self.log_message("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL –∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é", 'info')

        def _suggest_first_push(parent_window):
            result = messagebox.askyesno("–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                                         "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω! –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ GitHub —Å–µ–π—á–∞—Å?",
                                         parent=parent_window)
            if result:
                parent_window.destroy()
                self.push_to_github()
            else:
                parent_window.destroy()

        ttk.Button(buttons_frame, text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å", command=connect_repository).pack(side="right")
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=setup_window.destroy).pack(side="right", padx=(0, 10))
        url_entry.focus()

    def init_repository(self):
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if os.path.exists(os.path.join(self.project_path.get(), ".git")):
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í —ç—Ç–æ–π –ø–∞–ø–∫–µ —É–∂–µ –µ—Å—Ç—å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     f"–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –ø–∞–ø–∫–µ:\n{self.project_path.get()}?")
        if not result:
            return

        self.log_message("üÜï –°–û–ó–î–ê–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø", 'info')
        self.log_message("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", 'info')

        success, output = self.run_git_command("git init")
        if success:
            self.log_message("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!", 'success')

            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã
            self.log_message("–°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç...", 'info')
            self.run_git_command("git add .")

            commit_success, _ = self.run_git_command('git commit -m "Initial commit"')
            if commit_success:
                self.log_message("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω!", 'success')

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
            self.check_project()

            messagebox.showinfo("–£—Å–ø–µ—Ö", "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∫ GitHub.")
        else:
            self.log_message("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", 'error')
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")

    def update_file_status(self):
        if not self.project_path.get():
            return

        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item in self.file_tree.get_children():
            self.file_tree.delete(item)

        self.log_message("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤...", 'info')
        success, output = self.run_git_command("git status --porcelain", False)

        if success:
            if output.strip():
                for line in output.strip().split('\n'):
                    if len(line) >= 3:
                        status_code = line[:2]
                        filename = line[3:]

                        status_text, status_color = self._get_status_info(status_code)
                        description = self._get_status_description(status_code)

                        item = self.file_tree.insert('', 'end', text=filename,
                                                     values=(status_text, description))

                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞
                        self.file_tree.set(item, 'status', status_text)
                        if status_color == 'green':
                            self.file_tree.item(item, tags=('staged',))
                        elif status_color == 'red':
                            self.file_tree.item(item, tags=('modified',))
                        elif status_color == 'blue':
                            self.file_tree.item(item, tags=('untracked',))

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
                self.file_tree.tag_configure('staged', foreground='green')
                self.file_tree.tag_configure('modified', foreground='red')
                self.file_tree.tag_configure('untracked', foreground='blue')

                self.log_message(f"–ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(output.strip().split())}", 'info')
            else:
                # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
                self.file_tree.insert('', 'end', text="üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã",
                                      values=("‚úÖ –ß–∏—Å—Ç–æ", "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"))
                self.log_message("‚úÖ –†–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å —á–∏—Å—Ç–∞—è - –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π", 'success')
        else:
            self.log_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–æ–≤", 'error')

    def _get_status_info(self, status_code):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ü–≤–µ—Ç –¥–ª—è –∫–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ git"""
        status_map = {
            'M ': ('üìù –ò–∑–º–µ–Ω–µ–Ω', 'green'),  # Modified and staged
            ' M': ('üìù –ò–∑–º–µ–Ω–µ–Ω', 'red'),  # Modified not staged
            'A ': ('‚ûï –î–æ–±–∞–≤–ª–µ–Ω', 'green'),  # Added to staging
            'D ': ('üóëÔ∏è –£–¥–∞–ª–µ–Ω', 'green'),  # Deleted from staging
            ' D': ('üóëÔ∏è –£–¥–∞–ª–µ–Ω', 'red'),  # Deleted not staged
            'R ': ('üìõ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω', 'green'),  # Renamed
            'C ': ('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω', 'green'),  # Copied
            '??': ('‚ùì –ù–æ–≤—ã–π', 'blue'),  # Untracked
            'MM': ('üìù –°–º–µ—à–∞–Ω–Ω—ã–π', 'red'),  # Modified in both index and worktree
        }
        return status_map.get(status_code, (f'‚ùì {status_code}', 'gray'))

    def _get_status_description(self, status_code):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–∞"""
        descriptions = {
            'M ': '–í –∏–Ω–¥–µ–∫—Å–µ, –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É',
            ' M': '–ò–∑–º–µ–Ω–µ–Ω, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω–¥–µ–∫—Å',
            'A ': '–î–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å, –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É',
            'D ': '–£–¥–∞–ª–µ–Ω –∏–∑ –∏–Ω–¥–µ–∫—Å–∞',
            ' D': '–£–¥–∞–ª–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤ –∏–Ω–¥–µ–∫—Å–µ',
            'R ': '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω, –≤ –∏–Ω–¥–µ–∫—Å–µ',
            'C ': '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω, –≤ –∏–Ω–¥–µ–∫—Å–µ',
            '??': '–ù–æ–≤—ã–π —Ñ–∞–π–ª, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è',
            'MM': '–ò–∑–º–µ–Ω–µ–Ω –∏ –≤ –∏–Ω–¥–µ–∫—Å–µ –∏ –≤ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏',
        }
        return descriptions.get(status_code, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')

    def commit_selected_file(self):
        selection = self.file_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–º–º–∏—Ç–∞!")
            return

        commit_message = self.commit_text.get(1.0, tk.END).strip()
        if not commit_message:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
            return

        filename = self.file_tree.item(selection[0])['text']
        if filename == "üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã":
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞!")
            return

        self.log_message("üíæ –ö–û–ú–ú–ò–¢ –§–ê–ô–õ–ê", 'info')
        self.log_message(f"–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å: {filename}", 'info')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å
        add_success, _ = self.run_git_command(f'git add "{filename}"')
        if add_success:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            commit_success, _ = self.run_git_command(f'git commit -m "{commit_message}"')
            if commit_success:
                self.log_message(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", 'success')
                self.commit_text.delete(1.0, tk.END)
                self.update_file_status()
            else:
                self.log_message("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞", 'error')
        else:
            self.log_message("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –∏–Ω–¥–µ–∫—Å", 'error')

    def commit_all_changes(self):
        commit_message = self.commit_text.get(1.0, tk.END).strip()
        if not commit_message:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
            return

        self.log_message("üíæ –ö–û–ú–ú–ò–¢ –í–°–ï–• –ò–ó–ú–ï–ù–ï–ù–ò–ô", 'info')
        self.log_message("–î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å...", 'info')

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        add_success, _ = self.run_git_command("git add .")
        if add_success:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            commit_success, output = self.run_git_command(f'git commit -m "{commit_message}"')
            if commit_success:
                self.log_message("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", 'success')
                self.commit_text.delete(1.0, tk.END)
                self.update_file_status()
            else:
                if "nothing to commit" in output:
                    self.log_message("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞", 'info')
                else:
                    self.log_message("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞", 'error')
        else:
            self.log_message("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å", 'error')

    def auto_fill_commit_message(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.log_message("‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...", 'info')

        success, output = self.run_git_command("git diff --staged --name-status", False)
        if success and output.strip():
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            changes = output.strip().split('\n')
            added_files = [line[2:] for line in changes if line.startswith('A')]
            modified_files = [line[2:] for line in changes if line.startswith('M')]
            deleted_files = [line[2:] for line in changes if line.startswith('D')]

            message_parts = []
            if added_files:
                message_parts.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(added_files)}")
            if modified_files:
                message_parts.append(f"–ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(modified_files)}")
            if deleted_files:
                message_parts.append(f"–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(deleted_files)}")

            if message_parts:
                auto_message = ", ".join(message_parts)
            else:
                auto_message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç staged –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            success, output = self.run_git_command("git status --porcelain", False)
            if success and output.strip():
                lines = output.strip().split('\n')
                auto_message = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∏–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ ({len(lines)})"
            else:
                auto_message = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"

        self.commit_text.delete(1.0, tk.END)
        self.commit_text.insert(1.0, auto_message)
        self.log_message(f"‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {auto_message}", 'info')


if __name__ == "__main__":
    root = tk.Tk()
    app = GitHubHelper(root)
    root.mainloop()