import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import subprocess
import os
import shutil
from datetime import datetime
import threading
import sys


class GitHubHelper:
    def __init__(self, root):
        self.root = root
        self.root.title("GitHub Helper - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git")
        self.root.geometry("1200x900")
        self.root.configure(bg='#f0f0f0')

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.project_path = tk.StringVar()
        self.current_branch = tk.StringVar(value="–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        self.git_status = tk.StringVar(value="Git –Ω–µ –Ω–∞–π–¥–µ–Ω")

        self.setup_ui()
        self.check_git_installation()

    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="GitHub Helper",
                                font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        system_frame = ttk.LabelFrame(main_frame, text="1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
                                      padding="10")
        system_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E),
                          pady=(0, 10))
        system_frame.columnconfigure(1, weight=1)

        ttk.Label(system_frame, text="–°—Ç–∞—Ç—É—Å Git:").grid(row=0, column=0,
                                                         sticky=tk.W)
        ttk.Label(system_frame, textvariable=self.git_status).grid(row=0, column=1,
                                                                   sticky=tk.W, padx=(10, 0))
        ttk.Button(system_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Git",
                   command=self.check_git_installation).grid(row=0, column=2,
                                                             padx=(10, 0))

        # 2. –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        project_frame = ttk.LabelFrame(main_frame, text="2. –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞",
                                       padding="10")
        project_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E),
                           pady=(0, 10))
        project_frame.columnconfigure(1, weight=1)

        ttk.Label(project_frame, text="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É:").grid(row=0, column=0,
                                                              sticky=tk.W)
        ttk.Entry(project_frame, textvariable=self.project_path,
                  width=50).grid(row=0, column=1, sticky=(tk.W, tk.E),
                                 padx=(10, 10))
        ttk.Button(project_frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
                   command=self.select_project_folder).grid(row=0, column=2)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        info_frame = ttk.Frame(project_frame)
        info_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E),
                        pady=(10, 0))
        info_frame.columnconfigure(1, weight=1)

        ttk.Label(info_frame, text="–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:").grid(row=0, column=0,
                                                          sticky=tk.W)
        ttk.Label(info_frame, textvariable=self.current_branch).grid(row=0, column=1,
                                                                     sticky=tk.W, padx=(10, 0))
        ttk.Button(info_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
                   command=self.check_project).grid(row=0, column=2, padx=(10, 0))

        # 3. –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤
        status_frame = ttk.LabelFrame(main_frame, text="3. –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞",
                                      padding="10")
        status_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S),
                          pady=(0, 10))
        status_frame.columnconfigure(0, weight=1)
        status_frame.rowconfigure(1, weight=1)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        ttk.Button(status_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤",
                   command=self.update_file_status).grid(row=0, column=0,
                                                         sticky=tk.W, pady=(0, 10))

        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        self.file_tree = ttk.Treeview(status_frame, columns=('status',), height=8)
        self.file_tree.heading('#0', text='–§–∞–π–ª')
        self.file_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        self.file_tree.column('#0', width=600)
        self.file_tree.column('status', width=150)
        self.file_tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Scrollbar –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        scrollbar = ttk.Scrollbar(status_frame, orient=tk.VERTICAL,
                                  command=self.file_tree.yview)
        scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))
        self.file_tree.configure(yscrollcommand=scrollbar.set)

        # 4. –ö–æ–º–º–∏—Ç
        commit_frame = ttk.LabelFrame(main_frame, text="4. –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                                      padding="10")
        commit_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E),
                          pady=(0, 10))
        commit_frame.columnconfigure(1, weight=1)

        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–º–º–∏—Ç—É
        ttk.Label(commit_frame, text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:").grid(row=0, column=0,
                                                          sticky=tk.NW, pady=(5, 0))

        self.commit_text = tk.Text(commit_frame, height=3, width=50)
        self.commit_text.grid(row=0, column=1, sticky=(tk.W, tk.E),
                              padx=(10, 10), pady=(0, 10))

        # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        auto_frame = ttk.Frame(commit_frame)
        auto_frame.grid(row=0, column=2, sticky=tk.N, pady=(5, 0))

        ttk.Button(auto_frame, text="–ê–≤—Ç–æ-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                   command=self.auto_fill_commit_message).pack(pady=(0, 5))
        ttk.Button(auto_frame, text="–û—á–∏—Å—Ç–∏—Ç—å",
                   command=lambda: self.commit_text.delete(1.0, tk.END)).pack()

        # –ö–Ω–æ–ø–∫–∏ –∫–æ–º–º–∏—Ç–∞
        button_frame = ttk.Frame(commit_frame)
        button_frame.grid(row=1, column=0, columnspan=3, pady=(10, 0))

        ttk.Button(button_frame, text="–ö–æ–º–º–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
                   command=self.commit_selected_file).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="–ö–æ–º–º–∏—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                   command=self.commit_all_changes).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="Push –≤ GitHub",
                   command=self.push_to_github).pack(side=tk.LEFT)

        # 5. –ö–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∞
        console_frame = ttk.LabelFrame(main_frame, text="5. –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è",
                                       padding="10")
        console_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S),
                           pady=(0, 10))
        console_frame.columnconfigure(0, weight=1)
        console_frame.rowconfigure(0, weight=1)

        self.console = scrolledtext.ScrolledText(console_frame, height=10,
                                                 wrap=tk.WORD, state=tk.NORMAL)
        self.console.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –î–µ–ª–∞–µ–º –∫–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, –Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.console.bind("<Key>",
                          lambda e: "break" if e.keysym not in ['Control_L', 'Control_R', 'c', 'C', 'a', 'A'] else None)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª—å—é
        console_buttons_frame = ttk.Frame(console_frame)
        console_buttons_frame.grid(row=1, column=0, sticky=tk.W, pady=(10, 0))

        ttk.Button(console_buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å",
                   command=self.clear_console).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(console_buttons_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë",
                   command=self.copy_all_console).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(console_buttons_frame, text="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë",
                   command=self.select_all_console).pack(side=tk.LEFT)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–∞ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        main_frame.rowconfigure(3, weight=1)
        main_frame.rowconfigure(5, weight=1)

    def log_message(self, message, is_command=False):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å"""
        if is_command:
            self.console.insert(tk.END, f"\nüîß –ö–û–ú–ê–ù–î–ê: {message}\n", 'command')
        else:
            timestamp = datetime.now().strftime("%H:%M:%S")
            self.console.insert(tk.END, f"[{timestamp}] {message}\n")

        self.console.see(tk.END)
        self.root.update_idletasks()

    def clear_console(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏"""
        self.console.delete(1.0, tk.END)

    def copy_all_console(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω—Å–æ–ª–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        content = self.console.get(1.0, tk.END)
        self.root.clipboard_clear()
        self.root.clipboard_append(content)
        messagebox.showinfo("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Å–æ–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")

    def select_all_console(self):
        """–í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        self.console.tag_add(tk.SEL, "1.0", tk.END)
        self.console.mark_set(tk.INSERT, "1.0")
        self.console.see(tk.INSERT)

    def run_git_command(self, command, show_command=True):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Git –∫–æ–º–∞–Ω–¥—ã"""
        if show_command:
            self.log_message(command, is_command=True)

        try:
            if self.project_path.get():
                os.chdir(self.project_path.get())

            result = subprocess.run(command, shell=True, capture_output=True,
                                    text=True, encoding='utf-8')

            if result.returncode == 0:
                if result.stdout.strip():
                    self.log_message(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result.stdout.strip()}")
                return True, result.stdout.strip()
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr.strip()}")
                return False, result.stderr.strip()

        except Exception as e:
            self.log_message(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False, str(e)

    def check_git_installation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Git"""
        self.log_message("üìã –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
        self.log_message("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Git –≤ —Å–∏—Å—Ç–µ–º–µ")

        success, output = self.run_git_command("git --version")

        if success:
            self.git_status.set(f"‚úÖ {output}")
            self.log_message("Git –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            self.git_status.set("‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.log_message("‚ö†Ô∏è Git –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git —Å https://git-scm.com/")

    def select_project_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º")
        if folder:
            self.project_path.set(folder)
            self.log_message(f"üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")
            self.check_project()

    def check_project(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        self.log_message("üìã –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê")
        self.log_message("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
        success, output = self.run_git_command("git status")

        if success:
            self.log_message("‚úÖ –≠—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
            success, branch = self.run_git_command("git branch --show-current", False)
            if success and branch:
                self.current_branch.set(f"‚úÖ {branch}")
                self.log_message(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {branch}")

            self.update_file_status()
        else:
            self.current_branch.set("‚ùå –ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
            self.log_message("‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            result = messagebox.askyesno("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
                                         "–≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –•–æ—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?")
            if result:
                self.init_repository()

    def init_repository(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        self.log_message("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø")
        self.log_message("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ")

        success, output = self.run_git_command("git init")

        if success:
            self.log_message("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            self.current_branch.set("‚úÖ main (–Ω–æ–≤—ã–π)")

            # –°–æ–∑–¥–∞–µ–º .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            gitignore_path = os.path.join(self.project_path.get(), '.gitignore')
            if not os.path.exists(gitignore_path):
                with open(gitignore_path, 'w', encoding='utf-8') as f:
                    f.write("# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã\n__pycache__/\n*.pyc\n.env\n.vscode/\n")
                self.log_message("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .gitignore —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

            self.update_file_status()

    def update_file_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–æ–≤"""
        if not self.project_path.get():
            return

        self.log_message("üìã –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –§–ê–ô–õ–û–í")
        self.log_message("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑–º–µ–Ω–µ–Ω—ã, –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")

        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item in self.file_tree.get_children():
            self.file_tree.delete(item)

        success, output = self.run_git_command("git status --porcelain", False)

        if success and output:
            lines = output.strip().split('\n')
            for line in lines:
                if len(line) >= 3:
                    status_code = line[:2]
                    filename = line[3:]

                    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                    status_text = self.decode_git_status(status_code)

                    self.file_tree.insert('', 'end', text=filename,
                                          values=(status_text,))

            self.log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(lines)} —Ñ–∞–π–ª–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏")
        else:
            self.log_message("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")

    def decode_git_status(self, code):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ Git"""
        status_map = {
            'M ': '–ò–∑–º–µ–Ω–µ–Ω (staged)',
            ' M': '–ò–∑–º–µ–Ω–µ–Ω',
            'A ': '–î–æ–±–∞–≤–ª–µ–Ω (staged)',
            ' A': '–î–æ–±–∞–≤–ª–µ–Ω',
            'D ': '–£–¥–∞–ª–µ–Ω (staged)',
            ' D': '–£–¥–∞–ª–µ–Ω',
            '??': '–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è',
            'R ': '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω',
            'C ': '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω',
            'U ': '–ö–æ–Ω—Ñ–ª–∏–∫—Ç',
        }
        return status_map.get(code, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({code})')

    def auto_fill_commit_message(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        now = datetime.now()
        date_str = now.strftime("%Y-%m-%d %H:%M")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
        success, output = self.run_git_command("git diff --stat", False)

        if success and output:
            lines = output.strip().split('\n')
            files_changed = len([l for l in lines if '|' in l])
            message = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç {date_str} - –∏–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_changed}"
        else:
            message = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç –æ—Ç {date_str}"

        self.commit_text.delete(1.0, tk.END)
        self.commit_text.insert(1.0, message)

        self.log_message(f"üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message}")

    def commit_selected_file(self):
        """–ö–æ–º–º–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        selection = self.file_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–º–º–∏—Ç–∞!")
            return

        filename = self.file_tree.item(selection[0])['text']
        commit_message = self.commit_text.get(1.0, tk.END).strip()

        if not commit_message:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–º–º–∏—Ç—É!")
            return

        self.log_message(f"üì§ –ö–û–ú–ú–ò–¢ –§–ê–ô–õ–ê: {filename}")
        self.log_message("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ staging area –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        success, output = self.run_git_command(f'git add "{filename}"')

        if success:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            success, output = self.run_git_command(f'git commit -m "{commit_message}"')

            if success:
                self.log_message(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–º–º–∏—á–µ–Ω!")
                self.update_file_status()
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–º–º–∏—á–µ–Ω!")
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: {output}")

    def commit_all_changes(self):
        """–ö–æ–º–º–∏—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        commit_message = self.commit_text.get(1.0, tk.END).strip()

        if not commit_message:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–º–º–∏—Ç—É!")
            return

        self.log_message("üì§ –ö–û–ú–ú–ò–¢ –í–°–ï–• –ò–ó–ú–ï–ù–ï–ù–ò–ô")
        self.log_message("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        success, output = self.run_git_command("git add .")

        if success:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            success, output = self.run_git_command(f'git commit -m "{commit_message}"')

            if success:
                self.log_message("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã!")
                self.update_file_status()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã!")
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: {output}")

    def push_to_github(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ GitHub"""
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub?")

        if not result:
            return

        self.log_message("üöÄ –û–¢–ü–†–ê–í–ö–ê –í GITHUB")
        self.log_message("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
        success, branch = self.run_git_command("git branch --show-current", False)

        if success and branch:
            # Push –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            success, output = self.run_git_command(f"git push origin {branch}")

            if success:
                self.log_message("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub!")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub!")
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {output}")
                if "No such remote 'origin'" in output:
                    self.log_message("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–æ–±–∞–≤—å—Ç–µ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–∞–Ω–¥–æ–π:")
                    self.log_message("git remote add origin https://github.com/username/repository.git")


def main():
    root = tk.Tk()
    app = GitHubHelper(root)
    root.mainloop()


if __name__ == "__main__":
    main()