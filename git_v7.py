import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import subprocess
import os
import shutil
from datetime import datetime
import threading
import sys
import webbrowser

class GitHubHelper:
    def __init__(self, root):
        self.root = root
        self.root.title("GitHub Helper - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        self.root.geometry("1400x900")  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 1400x700
        self.root.configure(bg='#f0f0f0')
        self.root.minsize(1200, 800)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.project_path = tk.StringVar()
        self.current_branch = tk.StringVar(value="–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        self.git_status = tk.StringVar(value="Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
        self.remote_info = tk.StringVar(value="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.user_info = tk.StringVar(value="–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        self.connection_status = tk.StringVar(value="‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
        self.setup_scrollable_ui()

    def setup_scrollable_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill="both", expand=True, padx=10, pady=10)

        # PanedWindow –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –ª–µ–≤—É—é (–ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é) –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏
        main_pane = ttk.PanedWindow(main_container, orient=tk.HORIZONTAL)
        main_pane.pack(fill="both", expand=True)

        # –õ–ï–í–ê–Ø –ß–ê–°–¢–¨ ‚Äî —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        left_frame_outer = ttk.Frame(main_pane)
        main_pane.add(left_frame_outer, weight=3)

        # Canvas + Scrollbar –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(left_frame_outer, bg='#f0f0f0')
        scrollbar = ttk.Scrollbar(left_frame_outer, orient="vertical", command=canvas.yview)
        self.scrollable_frame = ttk.Frame(canvas)

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)
        right_frame = ttk.Frame(main_pane, padding="10")
        main_pane.add(right_frame, weight=1)

        # –¢–µ–ø–µ—Ä—å —Ä–∞–∑–º–µ—â–∞–µ–º UI –≤ scrollable_frame
        self.setup_ui_content(self.scrollable_frame, right_frame)

    def setup_ui_content(self, left_frame, right_frame):
        # --- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –õ–ï–í–û–ô –ß–ê–°–¢–ò ---
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(left_frame, text="üîß GitHub Helper - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤",
                                font=('Arial', 16, 'bold'))  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 18
        title_label.pack(pady=(0, 10))

        subtitle_label = ttk.Label(left_frame,
                                   text="–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git –∏ GitHub –±–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏",
                                   font=('Arial', 9), foreground="gray")
        subtitle_label.pack(pady=(0, 15))

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        system_frame = ttk.LabelFrame(left_frame, text="üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", padding="10")
        system_frame.pack(fill="x", pady=(0, 10))

        # Git —Å—Ç–∞—Ç—É—Å
        ttk.Label(system_frame, text="Git:", font=('Arial', 9, 'bold')).pack(anchor="w")
        git_status_frame = ttk.Frame(system_frame)
        git_status_frame.pack(fill="x", padx=(20, 0), pady=(0, 5))
        ttk.Label(git_status_frame, textvariable=self.git_status).pack(side="left")
        ttk.Button(git_status_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Git",
                   command=self.check_git_installation).pack(side="right")

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ttk.Label(system_frame, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git:", font=('Arial', 9, 'bold')).pack(anchor="w", pady=(5, 0))
        user_status_frame = ttk.Frame(system_frame)
        user_status_frame.pack(fill="x", padx=(20, 0), pady=(0, 5))
        ttk.Label(user_status_frame, textvariable=self.user_info).pack(side="left")
        ttk.Button(user_status_frame, text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å",
                   command=self.setup_git_user).pack(side="right", padx=(5, 0))

        ttk.Button(system_frame, text="üÜò –ü–æ–º–æ—â—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
                   command=self.show_beginner_help).pack(anchor="w", pady=(5, 0))

        # 2. –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        project_frame = ttk.LabelFrame(left_frame, text="üìÅ 2. –í—ã–±–æ—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ", padding="10")
        project_frame.pack(fill="x", pady=(0, 10))

        ttk.Label(project_frame, text="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É:").pack(anchor="w")
        entry_frame = ttk.Frame(project_frame)
        entry_frame.pack(fill="x", pady=(2, 5))
        ttk.Entry(entry_frame, textvariable=self.project_path,
                  font=('Arial', 9)).pack(side="left", fill="x", expand=True, padx=(0, 5))
        ttk.Button(entry_frame, text="–í—ã–±—Ä–∞—Ç—å",
                   command=self.select_project_folder).pack(side="right")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        info_frame = ttk.Frame(project_frame)
        info_frame.pack(fill="x", pady=(5, 0))

        ttk.Label(info_frame, text="–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:", width=18).grid(row=0, column=0, sticky="w", pady=1)
        ttk.Label(info_frame, textvariable=self.current_branch).grid(row=0, column=1, sticky="w", padx=(5, 0))

        ttk.Label(info_frame, text="–£–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:", width=18).grid(row=1, column=0, sticky="w", pady=1)
        ttk.Label(info_frame, textvariable=self.remote_info, wraplength=300).grid(row=1, column=1, sticky="w", padx=(5, 0))

        ttk.Label(info_frame, text="–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", width=18).grid(row=2, column=0, sticky="w", pady=1)
        self.connection_label = ttk.Label(info_frame, textvariable=self.connection_status)
        self.connection_label.grid(row=2, column=1, sticky="w", padx=(5, 0))

        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(project_frame)
        btn_frame.pack(fill="x", pady=(10, 0))
        ttk.Button(btn_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", command=self.check_project).pack(side="left", padx=(0, 5))
        ttk.Button(btn_frame, text="üÜï –°–æ–∑–¥–∞—Ç—å", command=self.init_repository).pack(side="left", padx=(0, 5))
        ttk.Button(btn_frame, text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å", command=self.setup_remote_repository).pack(side="left")

        # 3. –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤
        status_frame = ttk.LabelFrame(left_frame, text="üìã 3. –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞", padding="10")
        status_frame.pack(fill="both", expand=True, pady=(0, 10))

        header = ttk.Frame(status_frame)
        header.pack(fill="x", pady=(0, 5))
        ttk.Button(header, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.update_file_status).pack(side="left")
        ttk.Label(header, text="üí° –°–æ–≤–µ—Ç: –∑–µ–ª—ë–Ω—ã–µ ‚Äî –≥–æ—Ç–æ–≤—ã, –∫—Ä–∞—Å–Ω—ã–µ ‚Äî –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è",
                  foreground="gray", font=('Arial', 8)).pack(side="right")

        tree_frame = ttk.Frame(status_frame)
        tree_frame.pack(fill="both", expand=True)

        self.file_tree = ttk.Treeview(tree_frame, columns=('status', 'description'), height=5)
        self.file_tree.heading('#0', text='–§–∞–π–ª')
        self.file_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        self.file_tree.heading('description', text='–û–ø–∏—Å–∞–Ω–∏–µ')
        self.file_tree.column('#0', width=300)
        self.file_tree.column('status', width=100)
        self.file_tree.column('description', width=200)

        tree_scroll = ttk.Scrollbar(tree_frame, orient="vertical", command=self.file_tree.yview)
        self.file_tree.configure(yscrollcommand=tree_scroll.set)

        self.file_tree.pack(side="left", fill="both", expand=True)
        tree_scroll.pack(side="right", fill="y")

        # 4. –ö–æ–º–º–∏—Ç
        commit_frame = ttk.LabelFrame(left_frame, text="üíæ 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π", padding="10")
        commit_frame.pack(fill="x", pady=(0, 10))

        ttk.Label(commit_frame,
                  text="–ö–æ–º–º–∏—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º",
                  foreground="blue", font=('Arial', 9)).pack(anchor="w", pady=(0, 5))

        ttk.Label(commit_frame, text="–û–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:", font=('Arial', 9, 'bold')).pack(anchor="w")

        comment_frame = ttk.Frame(commit_frame)
        comment_frame.pack(fill="x", pady=(2, 5))

        self.commit_text = tk.Text(comment_frame, height=2, width=40, wrap=tk.WORD, font=('Arial', 9))
        self.commit_text.pack(side="left", fill="x", expand=True, padx=(0, 5))

        btns = ttk.Frame(comment_frame)
        btns.pack(side="right", fill="y")
        ttk.Button(btns, text="‚ú®", width=6, command=self.auto_fill_commit_message).pack(pady=(0, 2))
        ttk.Button(btns, text="üóëÔ∏è", width=6, command=lambda: self.commit_text.delete(1.0, tk.END)).pack()

        ttk.Label(commit_frame,
                  text="üí° –ü—Ä–∏–º–µ—Ä: '–ò—Å–ø—Ä–∞–≤–∏–ª –æ—à–∏–±–∫—É', '–î–æ–±–∞–≤–∏–ª —Ñ–æ—Ä–º—É'",
                  foreground="gray", font=('Arial', 8)).pack(anchor="w")

        commit_btns = ttk.Frame(commit_frame)
        commit_btns.pack(fill="x", pady=(10, 0))
        ttk.Button(commit_btns, text="üíæ –¢–µ–∫—É—â–∏–π", command=self.commit_selected_file).pack(side="left", padx=(0, 5))
        ttk.Button(commit_btns, text="üíæ –í—Å–µ", command=self.commit_all_changes).pack(side="left", padx=(0, 5))
        ttk.Button(commit_btns, text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.push_to_github).pack(side="left")

        # --- –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨: –ö–æ–Ω—Å–æ–ª—å –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ---
        console_frame = ttk.LabelFrame(right_frame, text="üì∫ –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π", padding="10")
        console_frame.pack(fill="both", expand=True)

        self.console = scrolledtext.ScrolledText(console_frame, height=24,
                                                 wrap=tk.WORD, state=tk.NORMAL,
                                                 font=('Consolas', 9))
        self.console.pack(fill="both", expand=True, pady=(0, 10))

        self.console.tag_configure('command', foreground='blue', font=('Consolas', 9, 'bold'))
        self.console.tag_configure('success', foreground='green')
        self.console.tag_configure('error', foreground='red')
        self.console.tag_configure('info', foreground='orange')

        self.setup_console_bindings()

        ttk.Button(console_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_console).pack(side="left")
        ttk.Label(console_frame, text="Ctrl+C ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", foreground="gray", font=('Arial', 8)).pack(side="left", padx=5)

        self.log_message("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GitHub Helper!", 'info')
        self.log_message("–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.", 'info')

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def setup_console_bindings(self):
        self.context_menu = tk.Menu(self.console, tearoff=0)
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_selection_menu)
        self.context_menu.add_command(label="‚úÖ –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", command=self.select_all_menu)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_console)
        self.console.bind("<Button-3>", self.show_context_menu)
        self.console.bind("<Control-c>", self.copy_selection)
        self.console.bind("<Control-a>", self.select_all)
        self.console.bind("<Key>", self.on_console_key_press)

    def on_console_key_press(self, event):
        allowed_keys = ['Control_L', 'Control_R', 'c', 'C', 'a', 'A',
                        'Left', 'Right', 'Up', 'Down', 'Home', 'End',
                        'Prior', 'Next', 'Shift_L', 'Shift_R']
        if event.keysym not in allowed_keys:
            return "break"

    def show_context_menu(self, event):
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()

    def copy_selection(self, event=None):
        try:
            selected_text = self.console.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
        except tk.TclError:
            pass
        return "break"

    def copy_selection_menu(self):
        try:
            selected_text = self.console.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
        except tk.TclError:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    def select_all(self, event=None):
        self.console.tag_add(tk.SEL, "1.0", tk.END)
        self.console.mark_set(tk.INSERT, "1.0")
        self.console.see(tk.INSERT)
        return "break"

    def select_all_menu(self):
        self.console.tag_add(tk.SEL, "1.0", tk.END)
        self.console.mark_set(tk.INSERT, "1.0")
        self.console.see(tk.INSERT)

    def log_message(self, message, msg_type='normal'):
        timestamp = datetime.now().strftime("%H:%M:%S")
        if msg_type == 'command':
            self.console.insert(tk.END, f"\nüîß –ö–û–ú–ê–ù–î–ê: {message}\n", 'command')
        elif msg_type == 'success':
            self.console.insert(tk.END, f"[{timestamp}] ‚úÖ {message}\n", 'success')
        elif msg_type == 'error':
            self.console.insert(tk.END, f"[{timestamp}] ‚ùå {message}\n", 'error')
        elif msg_type == 'info':
            self.console.insert(tk.END, f"[{timestamp}] ‚ÑπÔ∏è {message}\n", 'info')
        else:
            self.console.insert(tk.END, f"[{timestamp}] {message}\n")
        self.console.see(tk.END)
        self.root.update_idletasks()

    def clear_console(self):
        self.console.delete(1.0, tk.END)
        self.log_message("–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω", 'info')

    def run_git_command(self, command, show_command=True):
        if show_command:
            self.log_message(command, 'command')
        try:
            if self.project_path.get():
                os.chdir(self.project_path.get())
            result = subprocess.run(command, shell=True, capture_output=True,
                                    text=True, encoding='utf-8')
            if result.returncode == 0:
                if result.stdout.strip():
                    self.log_message(result.stdout.strip(), 'success')
                return True, result.stdout.strip()
            else:
                error_msg = result.stderr.strip()
                if not error_msg:
                    error_msg = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                self.log_message(error_msg, 'error')
                return False, error_msg
        except Exception as e:
            self.log_message(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}", 'error')
            return False, str(e)

    def check_git_installation(self):
        self.log_message("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´", 'info')
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Git –≤ —Å–∏—Å—Ç–µ–º–µ...", 'info')
        success, output = self.run_git_command("git --version")
        if success:
            self.git_status.set(f"‚úÖ {output}")
            self.log_message("Git –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", 'success')
            self.check_git_user()
        else:
            self.git_status.set("‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.log_message("Git –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞.", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –°–∫–∞—á–∞–π—Ç–µ Git —Å https://git-scm.com/", 'info')

    def check_git_user(self):
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git...", 'info')
        success_name, name = self.run_git_command("git config --global user.name", False)
        success_email, email = self.run_git_command("git config --global user.email", False)
        if success_name and success_email and name and email:
            self.user_info.set(f"‚úÖ {name} ({email})")
            self.log_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {name} ({email})", 'success')
        else:
            self.user_info.set("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.log_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'", 'info')

    def setup_git_user(self):
        # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        setup_window = tk.Toplevel(self.root)
        setup_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git")
        setup_window.geometry("400x300")
        setup_window.transient(self.root)
        setup_window.grab_set()
        setup_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))
        main_frame = ttk.Frame(setup_window, padding="20")
        main_frame.pack(fill="both", expand=True)

        ttk.Label(main_frame, text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git",
                  font=('Arial', 14, 'bold')).pack(pady=(0, 20))

        info_text = ("Git –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ –∏–º—è –∏ email –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫–æ–º–º–∏—Ç–æ–≤. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        ttk.Label(main_frame, text=info_text, wraplength=350,
                  justify="left", foreground="gray").pack(pady=(0, 20))

        ttk.Label(main_frame, text="–í–∞—à–µ –∏–º—è:", font=('Arial', 10, 'bold')).pack(anchor="w")
        name_entry = ttk.Entry(main_frame, font=('Arial', 11), width=30)
        name_entry.pack(fill="x", pady=(5, 15))

        ttk.Label(main_frame, text="–í–∞—à email:", font=('Arial', 10, 'bold')).pack(anchor="w")
        email_entry = ttk.Entry(main_frame, font=('Arial', 11), width=30)
        email_entry.pack(fill="x", pady=(5, 20))

        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill="x", pady=(10, 0))

        def save_user():
            name = name_entry.get().strip()
            email = email_entry.get().strip()
            if not name or not email:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            success1, _ = self.run_git_command(f'git config --global user.name "{name}"')
            success2, _ = self.run_git_command(f'git config --global user.email "{email}"')
            if success1 and success2:
                self.user_info.set(f"‚úÖ {name} ({email})")
                self.log_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {name} ({email})", 'success')
                setup_window.destroy()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_user).pack(side="right")
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=setup_window.destroy).pack(side="right", padx=(0, 10))
        name_entry.focus()

    def show_beginner_help(self):
        # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        help_window = tk.Toplevel(self.root)
        help_window.title("üÜò –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö")
        help_window.geometry("600x500")
        help_text = scrolledtext.ScrolledText(help_window, wrap=tk.WORD, padx=10, pady=10)
        help_text.pack(fill="both", expand=True)
        help_content = """
        ... (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        """
        help_text.insert(tk.END, help_content)
        help_text.configure(state=tk.DISABLED)
        close_button = ttk.Button(help_window, text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", command=help_window.destroy)
        close_button.pack(pady=10)

    def select_project_folder(self):
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º")
        if folder:
            self.project_path.set(folder)
            self.log_message(f"üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}", 'info')
            self.check_project()


    def check_project(self):
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        self.log_message("üìã –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê", 'info')
        self.log_message("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É...", 'info')

        success, output = self.run_git_command("git status", False)
        if success:
            self.log_message("‚úÖ –≠—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", 'success')

            success, branch = self.run_git_command("git branch --show-current", False)
            if success and branch:
                self.current_branch.set(f"‚úÖ {branch}")
                self.log_message(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {branch}", 'info')

            self.check_remote_repository()
            self.update_file_status()
        else:
            self.current_branch.set("‚ùå –ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
            self.remote_info.set("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.connection_status.set("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.log_message("‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π' –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", 'info')

    def check_remote_repository(self):
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é...", 'info')
        success, output = self.run_git_command("git remote -v", False)
        if success and output.strip():
            lines = output.strip().split('\n')
            origins = [line for line in lines if 'origin' in line and '(fetch)' in line]
            if origins:
                remote_url = origins[0].split('\t')[1].split(' ')[0]
                self.remote_info.set(f"‚úÖ {remote_url}")
                self.connection_status.set("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω")
                self.log_message(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫: {remote_url}", 'success')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
                self.test_remote_connection()
            else:
                self.remote_info.set("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                self.connection_status.set("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                self.log_message("–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", 'error')
        else:
            self.remote_info.set("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.connection_status.set("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.log_message("–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ GitHub'", 'info')

    def test_remote_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"""
        self.log_message("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å GitHub...", 'info')
        success, output = self.run_git_command("git ls-remote --heads origin", False)
        if success:
            self.connection_status.set("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.log_message("‚úÖ –°–≤—è–∑—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!", 'success')
        else:
            self.connection_status.set("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
            self.log_message("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é", 'error')
            if "authentication" in output.lower() or "denied" in output.lower():
                self.log_message("üí° –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH/Token", 'info')

    def push_to_github(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if "–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω" in self.connection_status.get().lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in self.connection_status.get().lower():
            self.log_message("‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...", 'error')
            self.setup_remote_repository()
            return

        self.log_message("üöÄ –û–¢–ü–†–ê–í–ö–ê –ù–ê GITHUB", 'info')
        self.log_message("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", 'info')

        # –ó–∞–ø—É—Å–∫–∞–µ–º push –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        threading.Thread(target=self._run_push).start()

    def _run_push(self):
        current_branch = self.current_branch.get().replace("‚úÖ ", "").strip()
        success, output = self.run_git_command(f"git push -u origin {current_branch}")
        if success:
            self.log_message("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub!", 'success')
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.root.after(100, self.check_remote_repository)
        else:
            self.log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: {output}", 'error')
            if "authentication" in output.lower() or "denied" in output.lower():
                self.log_message(
                    "üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSH –∫–ª—é—á–∏ –∏–ª–∏ Personal Access Token",
                    'info')

    def setup_remote_repository(self):
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        setup_window = tk.Toplevel(self.root)
        setup_window.title("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub")
        setup_window.geometry("650x600")
        setup_window.transient(self.root)
        setup_window.grab_set()
        setup_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))

        main_frame = ttk.Frame(setup_window, padding="20")
        main_frame.pack(fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(main_frame, text="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub",
                  font=('Arial', 14, 'bold')).pack(pady=(0, 20))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_text = ("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥ –Ω–∞ GitHub, –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π\n"
                     "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –Ω–∞ GitHub.")
        ttk.Label(main_frame, text=info_text, wraplength=500,
                  justify="left", foreground="gray").pack(pady=(0, 20))

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction_frame = ttk.LabelFrame(main_frame, text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", padding="15")
        instruction_frame.pack(fill="x", pady=(0, 20))

        instruction_text = ("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ GitHub.com\n"
                            "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (New repository)\n"
                            "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n"
                            "4. –í—Å—Ç–∞–≤—å—Ç–µ URL –≤ –ø–æ–ª–µ –Ω–∏–∂–µ\n"
                            "5. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'")
        ttk.Label(instruction_frame, text=instruction_text,
                  justify="left").pack(anchor="w", pady=(0, 10))

        ttk.Button(instruction_frame, text="üåê –û—Ç–∫—Ä—ã—Ç—å GitHub.com",
                   command=lambda: webbrowser.open("https://github.com/new")).pack(anchor="w")

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ URL
        ttk.Label(main_frame, text="URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub:",
                  font=('Arial', 10, 'bold')).pack(anchor="w")
        url_frame = ttk.Frame(main_frame)
        url_frame.pack(fill="x", pady=(5, 10))
        url_entry = ttk.Entry(url_frame, font=('Arial', 10))
        url_entry.pack(fill="x")

        # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –ø—Ä–∏–º–µ—Ä–æ–º
        example_url = "https://github.com/username/repository.git"
        url_entry.insert(0, example_url)

        ttk.Label(main_frame,
                  text="üí° –ü—Ä–∏–º–µ—Ä: https://github.com/unijohnson18/test_reclama.git",
                  foreground="gray", font=('Arial', 9)).pack(anchor="w", pady=(0, 15))

        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –æ–∫–Ω–µ
        status_frame = ttk.LabelFrame(main_frame, text="üîç –°—Ç–∞—Ç—É—Å", padding="10")
        status_frame.pack(fill="x", pady=(0, 20))

        status_var = tk.StringVar(value="–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        status_label = ttk.Label(status_frame, textvariable=status_var, foreground="orange")
        status_label.pack(anchor="w")

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill="x", pady=(10, 0))

        def connect_repository():
            url = url_entry.get().strip()
            if not url or url == example_url:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!")
                return

            status_var.set("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            setup_window.update()

            self.log_message(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: {url}", 'info')

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            self.run_git_command("git remote remove origin", False)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            success, output = self.run_git_command(f'git remote add origin "{url}"')
            if success:
                status_var.set("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!")
                self.log_message("‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!", 'success')

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ
                self.check_remote_repository()

                setup_window.destroy()
                messagebox.showinfo("–£—Å–ø–µ—Ö",
                                    "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ GitHub!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ GitHub.")
            else:
                status_var.set("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:\n\n{output}")

        def test_connection():
            url = url_entry.get().strip()
            if not url or url == example_url:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
                return

            status_var.set("‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            setup_window.update()

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ URL
            if not (url.startswith('https://github.com/') or url.startswith('git@github.com:')):
                status_var.set("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                       "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://github.com/ –∏–ª–∏ git@github.com:")
                return

            status_var.set("‚úÖ URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            messagebox.showinfo("–¢–µ—Å—Ç", "URL –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

        ttk.Button(buttons_frame, text="üß™ –¢–µ—Å—Ç URL",
                   command=test_connection).pack(side="left", padx=(0, 10))
        ttk.Button(buttons_frame, text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å",
                   command=connect_repository).pack(side="left", padx=(0, 10))
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞",
                   command=setup_window.destroy).pack(side="right")

        url_entry.focus()
        url_entry.select_range(0, tk.END)

    def init_repository(self):
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ?")
        if not result:
            return

        self.log_message("üöÄ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø", 'info')
        self.log_message("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", 'info')

        success, output = self.run_git_command("git init")
        if success:
            self.log_message("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", 'success')
            self.current_branch.set("‚úÖ main (–Ω–æ–≤—ã–π)")
            self.connection_status.set("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

            # –°–æ–∑–¥–∞–µ–º .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            gitignore_path = os.path.join(self.project_path.get(), '.gitignore')
            if not os.path.exists(gitignore_path):
                self.log_message("–°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–∞–π–ª .gitignore...", 'info')
                try:
                    with open(gitignore_path, "w", encoding='utf-8') as f:
                        f.write("__pycache__/\n")
                        f.write("*.pyc\n")
                        f.write("venv/\n")
                        f.write(".vscode/\n")
                        f.write("*.log\n")
                    self.log_message("‚úÖ .gitignore —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", 'success')
                except Exception as e:
                    self.log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å .gitignore: {str(e)}", 'error')

            # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
            self.log_message("–î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç...", 'info')
            self.run_git_command("git add .")
            self.run_git_command('git commit -m "Initial commit"')
            self.log_message("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", 'success')
            self.check_project()
        else:
            self.log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {output}", 'error')

    def update_file_status(self):
        if not self.project_path.get() or self.current_branch.get() == "‚ùå –ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π":
            self.log_message("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", 'info')
            return

        self.log_message("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤...", 'info')
        self.file_tree.delete(*self.file_tree.get_children())

        success, output = self.run_git_command("git status --porcelain", False)
        if success:
            lines = output.strip().split('\n')
            if not lines or output.strip() == "":
                self.file_tree.insert('', 'end', text="–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞",
                                      values=('‚úÖ –ß–∏—Å—Ç–æ', '–í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'), tags=('status_clean',))
                self.log_message("‚úÖ –†–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥ —á–∏—Å—Ç, –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞.", 'success')
                return

            for line in lines:
                status = line[0:2].strip()
                #filename = line[3:].strip()
                parts = line.strip().split(' ', 2)
                filename = parts[2].strip() if len(parts) > 2 else parts[-1].strip()
                if status == '??':
                    self.file_tree.insert('', 'end', text=filename,
                                          values=('‚ùå –ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è', '–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å'), tags=('status_untracked',))
                elif status in ('M', 'A', 'D', 'R', 'C'):
                    if status == 'M':
                        description = '–ò–∑–º–µ–Ω–µ–Ω'
                    elif status == 'A':
                        description = '–î–æ–±–∞–≤–ª–µ–Ω'
                    elif status == 'D':
                        description = '–£–¥–∞–ª–µ–Ω'
                    else:
                        description = '–ò–∑–º–µ–Ω–µ–Ω/–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω'
                    self.file_tree.insert('', 'end', text=filename,
                                          values=('‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–æ', description), tags=('status_modified',))

            # –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
            self.file_tree.tag_configure('status_untracked', background='#ffcccc')  # –ö—Ä–∞—Å–Ω—ã–π
            self.file_tree.tag_configure('status_modified', background='#ffff99')  # –ñ–µ–ª—Ç—ã–π
            self.file_tree.tag_configure('status_clean', background='#ccffcc')  # –ó–µ–ª–µ–Ω—ã–π
            self.log_message("‚úÖ –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω.", 'success')
        else:
            self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤.", 'error')

    def auto_fill_commit_message(self):
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success, output = self.run_git_command("git status --porcelain", False)
        if not success or not output.strip():
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞. –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return

        lines = output.strip().split('\n')
        messages = []
        for line in lines:
            status = line[0:2].strip()
            filename = line[3:].strip()
            if status == '??':
                messages.append(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {os.path.basename(filename)}")
            elif status == 'M':
                messages.append(f"–ò–∑–º–µ–Ω—ë–Ω —Ñ–∞–π–ª: {os.path.basename(filename)}")
            elif status == 'A':
                messages.append(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å: {os.path.basename(filename)}")
            elif status == 'D':
                messages.append(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {os.path.basename(filename)}")

        message = ", ".join(messages)
        if len(message) > 80:
            message = "–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã: " + ", ".join([os.path.basename(l[3:].strip()) for l in lines])

        self.commit_text.delete(1.0, tk.END)
        self.commit_text.insert(tk.END, message)
        self.log_message("–ê–≤—Ç–æ-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.", 'info')

    def commit_all_changes(self):
        if not self.project_path.get() or self.current_branch.get() == "‚ùå –ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π":
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")
            return

        commit_message = self.commit_text.get(1.0, tk.END).strip()
        if not commit_message:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞!")
            return

        self.log_message("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –ò–ó–ú–ï–ù–ï–ù–ò–ô", 'info')
        self.log_message("–î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∏–Ω–¥–µ–∫—Å...", 'info')

        add_success, add_output = self.run_git_command("git add .")
        if add_success:
            self.log_message("–ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...", 'info')
            commit_success, commit_output = self.run_git_command(f'git commit -m "{commit_message}"')
            if commit_success:
                self.log_message("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", 'success')
                self.update_file_status()
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
                self.commit_text.delete(1.0, tk.END)
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: {commit_output}", 'error')
        else:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {add_output}", 'error')

    def commit_selected_file(self):
        selected_item = self.file_tree.focus()
        if not selected_item:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞!")
            return

        filename = self.file_tree.item(selected_item, 'text')
        commit_message = self.commit_text.get(1.0, tk.END).strip()
        if not commit_message:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞!")
            return

        self.log_message(f"üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –§–ê–ô–õ–ê: {filename}", 'info')
        self.log_message(f"–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {filename} –≤ –∏–Ω–¥–µ–∫—Å...", 'info')

        add_success, add_output = self.run_git_command(f'git add "{filename}"')
        if add_success:
            self.log_message("–ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...", 'info')
            commit_success, commit_output = self.run_git_command(f'git commit -m "{commit_message}"')
            if commit_success:
                self.log_message(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", 'success')
                self.update_file_status()
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
                self.commit_text.delete(1.0, tk.END)
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: {commit_output}", 'error')
        else:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {add_output}", 'error')


if __name__ == "__main__":
    root = tk.Tk()
    app = GitHubHelper(root)
    root.mainloop()


    # # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (check_project, check_remote_repository, push_to_github –∏ —Ç.–¥.) ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    # # –ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –æ–Ω–∏ –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç UI
    #
    # # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–∏–∂–µ ‚Äî —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã, —Ç–µ–ª–æ –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    # def check_project(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass
    #
    # def check_remote_repository(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass
    #
    # def test_remote_connection(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass
    #
    # def push_to_github(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass
    #
    # def _run_push(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass
    #
    # def setup_remote_repository(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass
    #
    # def init_repository(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass
    #
    # def update_file_status(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass
    #
    # def auto_fill_commit_message(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass
    #
    # def commit_all_changes(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass
    #
    # def commit_selected_file(self):
    #     # ... (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ)
    #     pass

#
# if __name__ == "__main__":
#     root = tk.Tk()
#     app = GitHubHelper(root)
#     root.mainloop()