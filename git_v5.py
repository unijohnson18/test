import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import subprocess
import os
from datetime import datetime
import threading
import sys
import webbrowser


class GitHubHelper:
    def __init__(self, root):
        self.root = root
        self.root.title("GitHub Helper - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git")
        self.root.geometry("1400x800")
        self.root.configure(bg='#f0f0f0')

        self.project_path = tk.StringVar()
        self.current_branch = tk.StringVar(value="–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        self.git_status = tk.StringVar(value="Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
        self.remote_info = tk.StringVar(value="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.user_info = tk.StringVar(value="–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        self.setup_ui()
        self.check_git_installation()

    def setup_ui(self):
        main_pane = ttk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        main_pane.pack(fill="both", expand=True, padx=10, pady=10)

        left_frame = ttk.Frame(main_pane, padding="10")
        main_pane.add(left_frame, weight=3)

        right_frame = ttk.Frame(main_pane, padding="10")
        main_pane.add(right_frame, weight=1)

        title_label = ttk.Label(left_frame, text="üîß GitHub Helper - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤",
                                font=('Arial', 18, 'bold'))
        title_label.pack(pady=(0, 20))

        subtitle_label = ttk.Label(left_frame,
                                   text="–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git –∏ GitHub –±–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏",
                                   font=('Arial', 10), foreground="gray")
        subtitle_label.pack(pady=(0, 20))

        system_frame = ttk.LabelFrame(left_frame, text="üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", padding="15")
        system_frame.pack(fill="x", pady=(0, 15))
        git_info_frame = ttk.Frame(system_frame)
        git_info_frame.pack(fill="x", pady=(0, 10))
        ttk.Label(git_info_frame, text="Git:", font=('Arial', 10, 'bold')).pack(anchor="w")
        git_status_frame = ttk.Frame(git_info_frame)
        git_status_frame.pack(fill="x", padx=(20, 0))
        ttk.Label(git_status_frame, textvariable=self.git_status).pack(side="left")
        ttk.Button(git_status_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Git",
                   command=self.check_git_installation).pack(side="right")
        user_info_frame = ttk.Frame(system_frame)
        user_info_frame.pack(fill="x", pady=(0, 10))
        ttk.Label(user_info_frame, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git:", font=('Arial', 10, 'bold')).pack(anchor="w")
        user_status_frame = ttk.Frame(user_info_frame)
        user_status_frame.pack(fill="x", padx=(20, 0))
        ttk.Label(user_status_frame, textvariable=self.user_info).pack(side="left")
        ttk.Button(user_status_frame, text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                   command=self.setup_git_user).pack(side="right", padx=(10, 0))
        help_button = ttk.Button(system_frame, text="üÜò –ü–æ–º–æ—â—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
                                 command=self.show_beginner_help)
        help_button.pack(anchor="w", pady=(10, 0))

        project_frame = ttk.LabelFrame(left_frame, text="üìÅ 2. –í—ã–±–æ—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ", padding="15")
        project_frame.pack(fill="x", pady=(0, 15))
        path_frame = ttk.Frame(project_frame)
        path_frame.pack(fill="x", pady=(0, 10))
        ttk.Label(path_frame, text="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É:").pack(anchor="w")
        entry_frame = ttk.Frame(path_frame)
        entry_frame.pack(fill="x", pady=(5, 0))
        ttk.Entry(entry_frame, textvariable=self.project_path,
                  font=('Arial', 9)).pack(side="left", fill="x", expand=True)
        ttk.Button(entry_frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
                   command=self.select_project_folder).pack(side="right", padx=(10, 0))
        info_frame = ttk.Frame(project_frame)
        info_frame.pack(fill="x", pady=(10, 0))
        branch_frame = ttk.Frame(info_frame)
        branch_frame.pack(fill="x", pady=(0, 5))
        ttk.Label(branch_frame, text="–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:", width=20).pack(side="left")
        ttk.Label(branch_frame, textvariable=self.current_branch).pack(side="left", padx=(10, 0))
        remote_frame = ttk.Frame(info_frame)
        remote_frame.pack(fill="x", pady=(0, 5))
        ttk.Label(remote_frame, text="–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:", width=20).pack(side="left")
        ttk.Label(remote_frame, textvariable=self.remote_info, wraplength=400).pack(side="left", padx=(10, 0))
        project_buttons_frame = ttk.Frame(project_frame)
        project_buttons_frame.pack(fill="x", pady=(15, 0))
        ttk.Button(project_buttons_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
                   command=self.check_project).pack(side="left", padx=(0, 10))
        ttk.Button(project_buttons_frame, text="üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
                   command=self.init_repository).pack(side="left", padx=(0, 10))
        ttk.Button(project_buttons_frame, text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ GitHub",
                   command=self.setup_remote_repository).pack(side="left")

        status_frame = ttk.LabelFrame(left_frame, text="üìã 3. –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞", padding="15")
        status_frame.pack(fill="both", expand=True, pady=(0, 15))
        status_header_frame = ttk.Frame(status_frame)
        status_header_frame.pack(fill="x", pady=(0, 10))
        ttk.Button(status_header_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤",
                   command=self.update_file_status).pack(side="left")
        ttk.Label(status_header_frame,
                  text="üí° –°–æ–≤–µ—Ç: –ó–µ–ª–µ–Ω—ã–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∫–æ–º–º–∏—Ç—É, –∫—Ä–∞—Å–Ω—ã–µ - —Ç—Ä–µ–±—É—é—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                  foreground="gray").pack(side="right")
        tree_frame = ttk.Frame(status_frame)
        tree_frame.pack(fill="both", expand=True)
        self.file_tree = ttk.Treeview(tree_frame, columns=('status', 'description'), height=8)
        self.file_tree.heading('#0', text='üìÑ –§–∞–π–ª')
        self.file_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        self.file_tree.heading('description', text='–û–ø–∏—Å–∞–Ω–∏–µ')
        self.file_tree.column('#0', width=400)
        self.file_tree.column('status', width=150)
        self.file_tree.column('description', width=300)
        self.file_tree.pack(side="left", fill="both", expand=True)
        tree_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL,
                                       command=self.file_tree.yview)
        tree_scrollbar.pack(side="right", fill="y")
        self.file_tree.configure(yscrollcommand=tree_scrollbar.set)

        commit_frame = ttk.LabelFrame(left_frame, text="üíæ 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–æ–º–º–∏—Ç)", padding="15")
        commit_frame.pack(fill="x", pady=(0, 15))
        commit_info = ttk.Label(commit_frame,
                                text="‚ÑπÔ∏è –ö–æ–º–º–∏—Ç - —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –≤–∞—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏",
                                foreground="blue", font=('Arial', 9))
        commit_info.pack(anchor="w", pady=(0, 10))
        comment_frame = ttk.Frame(commit_frame)
        comment_frame.pack(fill="x", pady=(0, 10))
        ttk.Label(comment_frame, text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:", font=('Arial', 10, 'bold')).pack(anchor="w")
        text_frame = ttk.Frame(comment_frame)
        text_frame.pack(fill="x", pady=(5, 0))
        self.commit_text = tk.Text(text_frame, height=3, width=50, wrap=tk.WORD)
        self.commit_text.pack(side="left", fill="x", expand=True)
        comment_buttons_frame = ttk.Frame(text_frame)
        comment_buttons_frame.pack(side="right", padx=(10, 0), fill="y")
        ttk.Button(comment_buttons_frame, text="‚ú® –ê–≤—Ç–æ-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                   command=self.auto_fill_commit_message).pack(fill="x", pady=(0, 5))
        ttk.Button(comment_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                   command=lambda: self.commit_text.delete(1.0, tk.END)).pack(fill="x")
        examples_label = ttk.Label(comment_frame,
                                   text="üí° –ü—Ä–∏–º–µ—Ä—ã: '–î–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—Ö–æ–¥–∞', '–ò—Å–ø—Ä–∞–≤–∏–ª –æ—à–∏–±–∫—É –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ', '–û–±–Ω–æ–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é'",
                                   foreground="gray", font=('Arial', 8))
        examples_label.pack(anchor="w", pady=(5, 0))
        commit_buttons_frame = ttk.Frame(commit_frame)
        commit_buttons_frame.pack(fill="x", pady=(15, 0))
        ttk.Button(commit_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª",
                   command=self.commit_selected_file).pack(side="left", padx=(0, 10))
        ttk.Button(commit_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                   command=self.commit_all_changes).pack(side="left", padx=(0, 10))
        ttk.Button(commit_buttons_frame, text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ GitHub",
                   command=self.push_to_github).pack(side="left")

        console_frame = ttk.LabelFrame(right_frame, text="üì∫ 5. –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏", padding="15")
        console_frame.pack(fill="both", expand=True, pady=(0, 10))
        self.console = scrolledtext.ScrolledText(console_frame, height=12,
                                                 wrap=tk.WORD, state=tk.NORMAL,
                                                 font=('Consolas', 9))
        self.console.pack(fill="both", expand=True, pady=(0, 10))
        self.console.tag_configure('command', foreground='blue', font=('Consolas', 9, 'bold'))
        self.console.tag_configure('success', foreground='green')
        self.console.tag_configure('error', foreground='red')
        self.console.tag_configure('info', foreground='orange')
        self.setup_console_bindings()
        console_buttons_frame = ttk.Frame(console_frame)
        console_buttons_frame.pack(fill="x")
        ttk.Button(console_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª",
                   command=self.clear_console).pack(side="left", padx=(0, 10))
        ttk.Label(console_buttons_frame,
                  text="üí° –í—ã–¥–µ–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç –º—ã—à—å—é –∏ –∫–æ–ø–∏—Ä—É–π—Ç–µ Ctrl+C",
                  foreground="gray", font=('Arial', 8)).pack(side="left", padx=(10, 0))
        self.log_message("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GitHub Helper!", 'info')
        self.log_message("–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å Git –∏ GitHub –±–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.", 'info')
        self.log_message("–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.", 'info')

    def setup_console_bindings(self):
        self.context_menu = tk.Menu(self.console, tearoff=0)
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_selection_menu)
        self.context_menu.add_command(label="‚úÖ –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", command=self.select_all_menu)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª", command=self.clear_console)
        self.console.bind("<Button-3>", self.show_context_menu)
        self.console.bind("<Control-c>", self.copy_selection)
        self.console.bind("<Control-a>", self.select_all)
        self.console.bind("<Key>", self.on_console_key_press)

    def on_console_key_press(self, event):
        allowed_keys = ['Control_L', 'Control_R', 'c', 'C', 'a', 'A',
                        'Left', 'Right', 'Up', 'Down', 'Home', 'End',
                        'Prior', 'Next', 'Shift_L', 'Shift_R']
        if event.keysym not in allowed_keys:
            return "break"

    def show_context_menu(self, event):
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()

    def copy_selection(self, event=None):
        try:
            selected_text = self.console.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
        except tk.TclError:
            pass
        return "break"

    def copy_selection_menu(self):
        try:
            selected_text = self.console.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
        except tk.TclError:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    def select_all(self, event=None):
        self.console.tag_add(tk.SEL, "1.0", tk.END)
        self.console.mark_set(tk.INSERT, "1.0")
        self.console.see(tk.INSERT)
        return "break"

    def select_all_menu(self):
        self.console.tag_add(tk.SEL, "1.0", tk.END)
        self.console.mark_set(tk.INSERT, "1.0")
        self.console.see(tk.INSERT)

    def log_message(self, message, msg_type='normal'):
        timestamp = datetime.now().strftime("%H:%M:%S")
        if msg_type == 'command':
            self.console.insert(tk.END, f"\nüîß –ö–û–ú–ê–ù–î–ê: {message}\n", 'command')
        elif msg_type == 'success':
            self.console.insert(tk.END, f"[{timestamp}] ‚úÖ {message}\n", 'success')
        elif msg_type == 'error':
            self.console.insert(tk.END, f"[{timestamp}] ‚ùå {message}\n", 'error')
        elif msg_type == 'info':
            self.console.insert(tk.END, f"[{timestamp}] ‚ÑπÔ∏è {message}\n", 'info')
        else:
            self.console.insert(tk.END, f"[{timestamp}] {message}\n")
        self.console.see(tk.END)
        self.root.update_idletasks()

    def clear_console(self):
        self.console.delete(1.0, tk.END)
        self.log_message("–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω", 'info')

    def run_git_command(self, command, show_command=True):
        if show_command:
            self.log_message(command, 'command')
        try:
            if self.project_path.get():
                os.chdir(self.project_path.get())
            result = subprocess.run(command, shell=True, capture_output=True,
                                    text=True, encoding='utf-8')
            if result.returncode == 0:
                if result.stdout.strip():
                    self.log_message(result.stdout.strip(), 'success')
                return True, result.stdout.strip()
            else:
                error_msg = result.stderr.strip()
                if not error_msg:
                    error_msg = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                self.log_message(error_msg, 'error')
                return False, error_msg
        except Exception as e:
            self.log_message(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}", 'error')
            return False, str(e)

    def check_git_installation(self):
        self.log_message("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´", 'info')
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Git –≤ —Å–∏—Å—Ç–µ–º–µ...", 'info')
        success, output = self.run_git_command("git --version", False)
        if success:
            self.git_status.set(f"‚úÖ {output}")
            self.log_message("Git –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", 'success')
            self.check_git_user()
        else:
            self.git_status.set("‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.log_message("Git –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞.", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –°–∫–∞—á–∞–π—Ç–µ Git —Å https://git-scm.com/", 'info')

    def check_git_user(self):
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git...", 'info')
        success_name, name = self.run_git_command("git config --global user.name", False)
        success_email, email = self.run_git_command("git config --global user.email", False)
        if success_name and success_email and name and email:
            self.user_info.set(f"‚úÖ {name} ({email})")
            self.log_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {name} ({email})", 'success')
        else:
            self.user_info.set("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.log_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'", 'info')

    def setup_git_user(self):
        setup_window = tk.Toplevel(self.root)
        setup_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git")
        setup_window.geometry("400x300")
        setup_window.transient(self.root)
        setup_window.grab_set()
        setup_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))
        main_frame = ttk.Frame(setup_window, padding="20")
        main_frame.pack(fill="both", expand=True)
        ttk.Label(main_frame, text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git",
                  font=('Arial', 14, 'bold')).pack(pady=(0, 20))
        info_text = ("Git –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ –∏–º—è –∏ email –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫–æ–º–º–∏—Ç–æ–≤.\n"
                     "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        ttk.Label(main_frame, text=info_text, wraplength=350,
                  justify="left", foreground="gray").pack(pady=(0, 20))
        ttk.Label(main_frame, text="–í–∞—à–µ –∏–º—è:", font=('Arial', 10, 'bold')).pack(anchor="w")
        name_entry = ttk.Entry(main_frame, font=('Arial', 11), width=30)
        name_entry.pack(fill="x", pady=(5, 15))
        ttk.Label(main_frame, text="–í–∞—à email:", font=('Arial', 10, 'bold')).pack(anchor="w")
        email_entry = ttk.Entry(main_frame, font=('Arial', 11), width=30)
        email_entry.pack(fill="x", pady=(5, 20))
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill="x", pady=(10, 0))

        def save_user():
            name = name_entry.get().strip()
            email = email_entry.get().strip()
            if not name or not email:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return
            success1, _ = self.run_git_command(f'git config --global user.name "{name}"')
            success2, _ = self.run_git_command(f'git config --global user.email "{email}"')
            if success1 and success2:
                self.user_info.set(f"‚úÖ {name} ({email})")
                self.log_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {name} ({email})", 'success')
                setup_window.destroy()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                   command=save_user).pack(side="right")
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞",
                   command=setup_window.destroy).pack(side="right", padx=(0, 10))
        name_entry.focus()

    def show_beginner_help(self):
        help_window = tk.Toplevel(self.root)
        help_window.title("üÜò –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö")
        help_window.geometry("600x500")
        help_window.transient(self.root)
        help_text = scrolledtext.ScrolledText(help_window, wrap=tk.WORD, padx=10, pady=10)
        help_text.pack(fill="both", expand=True)
        help_content = """
üÜò –°–ü–†–ê–í–ö–ê –î–õ–Ø –ù–ê–ß–ò–ù–ê–Æ–©–ò–•

ü§î –ß–¢–û –¢–ê–ö–û–ï GIT –ò GITHUB?
Git - —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
GitHub - —ç—Ç–æ —Å–∞–π—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ

üìö –û–°–ù–û–í–ù–´–ï –ü–û–ù–Ø–¢–ò–Ø:
‚Ä¢ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π - –ø–∞–ø–∫–∞ —Å –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º Git
‚Ä¢ –ö–æ–º–º–∏—Ç - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
‚Ä¢ Push - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ GitHub
‚Ä¢ Pull - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å GitHub

üöÄ –ö–ê–ö –ù–ê–ß–ê–¢–¨ –†–ê–ë–û–¢–£:

1Ô∏è‚É£ –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö:
    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Git (—Ä–∞–∑–¥–µ–ª 1)
    ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git (—É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ email)

2Ô∏è‚É£ –ù–û–í–´–ô –ü–†–û–ï–ö–¢:
    ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ 2
    ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"

3Ô∏è‚É£ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–†–û–ï–ö–¢:
    ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ 2
    ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"

4Ô∏è‚É£ –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô:
    ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
    ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ (—Ä–∞–∑–¥–µ–ª 3)
    ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ä–∞–∑–¥–µ–ª 4)
    ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"

5Ô∏è‚É£ –û–¢–ü–†–ê–í–ö–ê –ù–ê GITHUB:
    ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub.com
    ‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –µ–≥–æ (–∫–Ω–æ–ø–∫–∞ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ GitHub")
    ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ GitHub"

üîó –ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç GitHub: https://github.com/join
‚Ä¢ –°–∫–∞—á–∞—Ç—å Git: https://git-scm.com/
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è GitHub: https://docs.github.com/

‚ùì –ß–ê–°–¢–´–ï –í–û–ü–†–û–°–´:
Q: –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ Git –Ω–µ –Ω–∞–π–¥–µ–Ω?
A: –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞

Q: –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub?
A: –ó–∞–π–¥–∏—Ç–µ –Ω–∞ GitHub.com ‚Üí –Ω–∞–∂–º–∏—Ç–µ "New repository"

Q: –ß—Ç–æ –ø–∏—Å–∞—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–º–º–∏—Ç—É?
A: –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∏: "–î–æ–±–∞–≤–∏–ª –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞", "–ò—Å–ø—Ä–∞–≤–∏–ª –æ—à–∏–±–∫—É"

üí° –°–û–í–ï–¢: –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ –∏ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏!
        """
        help_text.insert(tk.END, help_content)
        help_text.configure(state=tk.DISABLED)
        close_button = ttk.Button(help_window, text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ",
                                  command=help_window.destroy)
        close_button.pack(pady=10)

    def select_project_folder(self):
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º")
        if folder:
            self.project_path.set(folder)
            self.log_message(f"üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}", 'info')
            self.check_project()

    def check_project(self):
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return
        self.log_message("üìã –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê", 'info')
        self.log_message("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É...", 'info')
        success, output = self.run_git_command("git status", False)
        if success:
            self.log_message("‚úÖ –≠—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", 'success')
            success, branch = self.run_git_command("git branch --show-current", False)
            if success and branch:
                self.current_branch.set(f"‚úÖ {branch}")
                self.log_message(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {branch}", 'info')
            self.check_remote_repository()
            self.update_file_status()
        else:
            self.current_branch.set("‚ùå –ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
            self.remote_info.set("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.log_message("‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π' –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", 'info')

    def check_remote_repository(self):
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é...", 'info')
        success, output = self.run_git_command("git remote -v", False)
        if success and output.strip():
            lines = output.strip().split('\n')
            origins = [line for line in lines if 'origin' in line and '(fetch)' in line]
            if origins:
                remote_url = origins[0].split('\t')[1].split(' ')[0]
                self.remote_info.set(f"‚úÖ {remote_url}")
                self.log_message(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫: {remote_url}", 'success')
            else:
                self.remote_info.set("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                self.log_message("–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", 'error')
        else:
            self.remote_info.set("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.log_message("–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ GitHub'", 'info')

    def push_to_github(self):
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        success_remote, output_remote = self.run_git_command("git remote -v", False)
        if not success_remote or not output_remote.strip():
            self.log_message("‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...", 'error')
            self.setup_remote_repository()
            return

        self.log_message("üöÄ –û–¢–ü–†–ê–í–ö–ê –ù–ê GITHUB", 'info')
        self.log_message("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", 'info')

        threading.Thread(target=self._run_push).start()

    def _run_push(self):
        success, output = self.run_git_command(
            "git push -u origin " + self.current_branch.get().replace("‚úÖ ", "").strip())
        if success:
            self.log_message("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub!", 'success')
        else:
            self.log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n{output}", 'error')

    def setup_remote_repository(self):
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return
        setup_window = tk.Toplevel(self.root)
        setup_window.title("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub")
        setup_window.geometry("500x400")
        setup_window.transient(self.root)
        setup_window.grab_set()
        setup_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))
        main_frame = ttk.Frame(setup_window, padding="20")
        main_frame.pack(fill="both", expand=True)
        ttk.Label(main_frame, text="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub",
                  font=('Arial', 14, 'bold')).pack(pady=(0, 20))
        info_text = ("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥ –Ω–∞ GitHub, –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π\n"
                     "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –Ω–∞ GitHub.")
        ttk.Label(main_frame, text=info_text, wraplength=450,
                  justify="left", foreground="gray").pack(pady=(0, 20))
        instruction_frame = ttk.LabelFrame(main_frame, text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", padding="10")
        instruction_frame.pack(fill="x", pady=(0, 20))
        instruction_text = ("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ GitHub.com\n"
                            "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (New repository)\n"
                            "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n"
                            "4. –í—Å—Ç–∞–≤—å—Ç–µ URL –≤ –ø–æ–ª–µ –Ω–∏–∂–µ")
        ttk.Label(instruction_frame, text=instruction_text,
                  justify="left").pack(anchor="w")
        ttk.Button(instruction_frame, text="üåê –û—Ç–∫—Ä—ã—Ç—å GitHub.com",
                   command=lambda: webbrowser.open("https://github.com/new")).pack(pady=(10, 0))
        ttk.Label(main_frame, text="URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub:",
                  font=('Arial', 10, 'bold')).pack(anchor="w")
        url_frame = ttk.Frame(main_frame)
        url_frame.pack(fill="x", pady=(5, 10))
        url_entry = ttk.Entry(url_frame, font=('Arial', 10))
        url_entry.pack(fill="x")
        url_entry.insert(0, "https://github.com/username/repository.git")
        ttk.Label(main_frame,
                  text="üí° –ü—Ä–∏–º–µ—Ä: https://github.com/username/my-project.git",
                  foreground="gray", font=('Arial', 9)).pack(anchor="w", pady=(0, 20))
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill="x", pady=(10, 0))

        def connect_repository():
            url = url_entry.get().strip()
            if not url or url == "https://github.com/username/repository.git":
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!")
                return
            self.log_message(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: {url}", 'info')
            self.run_git_command("git remote remove origin", False)
            success, output = self.run_git_command(f'git remote add origin "{url}"')
            if success:
                self.log_message("‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!", 'success')
                self.check_remote_repository()
                setup_window.destroy()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ GitHub!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:\n{output}")

        ttk.Button(buttons_frame, text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å",
                   command=connect_repository).pack(side="right")
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞",
                   command=setup_window.destroy).pack(side="right", padx=(0, 10))
        url_entry.focus()
        url_entry.select_range(0, tk.END)

    def init_repository(self):
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return
        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ?")
        if not result:
            return
        self.log_message("üöÄ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø", 'info')
        self.log_message("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", 'info')
        success, output = self.run_git_command("git init")
        if success:
            self.log_message("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", 'success')
            self.current_branch.set("‚úÖ main (–Ω–æ–≤—ã–π)")
            gitignore_path = os.path.join(self.project_path.get(), '.gitignore')
            if not os.path.exists(gitignore_path):
                self.log_message("–°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–∞–π–ª .gitignore...", 'info')
                try:
                    with open(gitignore_path, "w", encoding='utf-8') as f:
                        f.write("__pycache__/\n")
                        f.write("*.pyc\n")
                        f.write("venv/\n")
                        f.write(".vscode/\n")
                        f.write("*.log\n")
                    self.log_message("‚úÖ .gitignore —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", 'success')
                except Exception as e:
                    self.log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å .gitignore: {str(e)}", 'error')
            self.log_message("–î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç...", 'info')
            self.run_git_command("git add .")
            self.run_git_command('git commit -m "Initial commit"')
            self.log_message("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", 'success')
            self.check_project()
        else:
            self.log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {output}", 'error')

    def update_file_status(self):
        if not self.project_path.get() or "–ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" in self.current_branch.get():
            self.log_message("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", 'info')
            return
        self.log_message("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤...", 'info')
        self.file_tree.delete(*self.file_tree.get_children())
        success, output = self.run_git_command("git status --porcelain", False)
        if success:
            lines = output.strip().split('\n')
            if not lines or not output.strip():
                self.log_message("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —á–∏—Å—Ç—ã–µ. –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞.", 'success')
            else:
                for line in lines:
                    line = line.strip()
                    status = line[0:2].strip()
                    file_name = line[2:].strip()
                    if status == "??":
                        self.file_tree.insert('', 'end', text=file_name, values=('Untracked', '–ù–æ–≤—ã–π —Ñ–∞–π–ª'), tags=('untracked',))
                    elif status == "A":
                        self.file_tree.insert('', 'end', text=file_name, values=('Added', '–î–æ–±–∞–≤–ª–µ–Ω'), tags=('added',))
                    elif status == "M":
                        self.file_tree.insert('', 'end', text=file_name, values=('Modified', '–ò–∑–º–µ–Ω–µ–Ω'), tags=('modified',))
                    elif status == "D":
                        self.file_tree.insert('', 'end', text=file_name, values=('Deleted', '–£–¥–∞–ª–µ–Ω'), tags=('deleted',))
                    elif status == "R":
                        self.file_tree.insert('', 'end', text=file_name, values=('Renamed', '–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω'), tags=('renamed',))
                    elif status == "C":
                        self.file_tree.insert('', 'end', text=file_name, values=('Copied', '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω'), tags=('copied',))
            self.file_tree.tag_configure('untracked', foreground='red')
            self.file_tree.tag_configure('added', foreground='green')
            self.file_tree.tag_configure('modified', foreground='blue')
            self.file_tree.tag_configure('deleted', foreground='purple')
            self.file_tree.tag_configure('renamed', foreground='orange')
            self.file_tree.tag_configure('copied', foreground='brown')
            self.log_message("‚úÖ –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω.", 'success')
        else:
            self.log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤: {output}", 'error')

    def auto_fill_commit_message(self):
        self.log_message("‚ú® –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...", 'info')
        commit_message = ""
        success, output = self.run_git_command("git status --porcelain", False)
        if success and output.strip():
            lines = output.strip().split('\n')
            for line in lines:
                line = line.strip()
                status = line[0:2].strip()
                file_name = line[2:].strip()
                if status == "??":
                    commit_message += f"Add {file_name}\n"
                elif status == "A":
                    commit_message += f"Add {file_name}\n"
                elif status == "M":
                    commit_message += f"Update {file_name}\n"
                elif status == "D":
                    commit_message += f"Remove {file_name}\n"
            self.commit_text.delete(1.0, tk.END)
            self.commit_text.insert(tk.END, commit_message.strip())
            self.log_message("‚úÖ –ê–≤—Ç–æ-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω.", 'success')
        else:
            self.log_message("‚ùå –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.", 'error')
            self.commit_text.delete(1.0, tk.END)
            self.commit_text.insert(tk.END, "No changes to commit")

    def commit_selected_file(self):
        if not self.project_path.get() or "–ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" in self.current_branch.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return
        selected_item = self.file_tree.focus()
        if not selected_item:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞!")
            return
        file_name = self.file_tree.item(selected_item, 'text')
        commit_message = self.commit_text.get(1.0, tk.END).strip()
        if not commit_message:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞!")
            return
        self.log_message("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í–´–ë–†–ê–ù–ù–û–ì–û –§–ê–ô–õ–ê", 'info')
        success_add, _ = self.run_git_command(f'git add "{file_name}"')
        if success_add:
            success_commit, _ = self.run_git_command(f'git commit -m "{commit_message}"')
            if success_commit:
                self.log_message("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (—Å–∫–æ–º–º–∏—á–µ–Ω)!", 'success')
                self.update_file_status()
            else:
                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç –¥–ª—è —Ñ–∞–π–ª–∞.", 'error')
        else:
            self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ staging area.", 'error')

    def commit_all_changes(self):
        if not self.project_path.get() or "–ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" in self.current_branch.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return
        commit_message = self.commit_text.get(1.0, tk.END).strip()
        if not commit_message:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞!")
            return
        self.log_message("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –ò–ó–ú–ï–ù–ï–ù–ò–ô", 'info')
        success_add, _ = self.run_git_command("git add .")
        if success_add:
            success_commit, _ = self.run_git_command(f'git commit -m "{commit_message}"')
            if success_commit:
                self.log_message("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—Å–∫–æ–º–º–∏—á–µ–Ω—ã)!", 'success')
                self.update_file_status()
            else:
                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç.", 'error')
        else:
            self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –≤ staging area.", 'error')


if __name__ == "__main__":
    root = tk.Tk()
    style = ttk.Style(root)
    try:
        style.theme_use('clam')
    except tk.TclError:
        pass
    app = GitHubHelper(root)
    root.mainloop()