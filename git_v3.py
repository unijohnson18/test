import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import subprocess
import os
import shutil
from datetime import datetime
import threading
import sys
import webbrowser


class GitHubHelper:
    def __init__(self, root):
        self.root = root
        self.root.title("GitHub Helper - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git")
        self.root.geometry("1400x1000")
        self.root.configure(bg='#f0f0f0')

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.project_path = tk.StringVar()
        self.current_branch = tk.StringVar(value="–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        self.git_status = tk.StringVar(value="Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
        self.remote_info = tk.StringVar(value="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        self.user_info = tk.StringVar(value="–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        self.setup_ui()
        self.check_git_installation()

    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        canvas = tk.Canvas(self.root)
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # –£–ø–∞–∫–æ–≤–∫–∞ canvas –∏ scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ scrollable_frame
        main_frame = ttk.Frame(scrollable_frame, padding="10")
        main_frame.pack(fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üîß GitHub Helper - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤",
                                font=('Arial', 18, 'bold'))
        title_label.pack(pady=(0, 20))

        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
        subtitle_label = ttk.Label(main_frame,
                                   text="–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Git –∏ GitHub –±–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏",
                                   font=('Arial', 10), foreground="gray")
        subtitle_label.pack(pady=(0, 20))

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
        system_frame = ttk.LabelFrame(main_frame, text="üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                                      padding="15")
        system_frame.pack(fill="x", pady=(0, 15))

        # Git —Å—Ç–∞—Ç—É—Å
        git_info_frame = ttk.Frame(system_frame)
        git_info_frame.pack(fill="x", pady=(0, 10))

        ttk.Label(git_info_frame, text="Git:", font=('Arial', 10, 'bold')).pack(anchor="w")
        git_status_frame = ttk.Frame(git_info_frame)
        git_status_frame.pack(fill="x", padx=(20, 0))

        ttk.Label(git_status_frame, textvariable=self.git_status).pack(side="left")
        ttk.Button(git_status_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Git",
                   command=self.check_git_installation).pack(side="right")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Git
        user_info_frame = ttk.Frame(system_frame)
        user_info_frame.pack(fill="x", pady=(0, 10))

        ttk.Label(user_info_frame, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git:", font=('Arial', 10, 'bold')).pack(anchor="w")
        user_status_frame = ttk.Frame(user_info_frame)
        user_status_frame.pack(fill="x", padx=(20, 0))

        ttk.Label(user_status_frame, textvariable=self.user_info).pack(side="left")
        ttk.Button(user_status_frame, text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                   command=self.setup_git_user).pack(side="right", padx=(10, 0))

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
        help_button = ttk.Button(system_frame, text="üÜò –ü–æ–º–æ—â—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
                                 command=self.show_beginner_help)
        help_button.pack(anchor="w", pady=(10, 0))

        # 2. –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        project_frame = ttk.LabelFrame(main_frame, text="üìÅ 2. –í—ã–±–æ—Ä –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ",
                                       padding="15")
        project_frame.pack(fill="x", pady=(0, 15))

        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        path_frame = ttk.Frame(project_frame)
        path_frame.pack(fill="x", pady=(0, 10))

        ttk.Label(path_frame, text="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É:").pack(anchor="w")
        entry_frame = ttk.Frame(path_frame)
        entry_frame.pack(fill="x", pady=(5, 0))

        ttk.Entry(entry_frame, textvariable=self.project_path,
                  font=('Arial', 9)).pack(side="left", fill="x", expand=True)
        ttk.Button(entry_frame, text="–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
                   command=self.select_project_folder).pack(side="right", padx=(10, 0))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º –≤–∏–¥–µ
        info_frame = ttk.Frame(project_frame)
        info_frame.pack(fill="x", pady=(10, 0))

        # –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞
        branch_frame = ttk.Frame(info_frame)
        branch_frame.pack(fill="x", pady=(0, 5))
        ttk.Label(branch_frame, text="–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:", width=20).pack(side="left")
        ttk.Label(branch_frame, textvariable=self.current_branch).pack(side="left", padx=(10, 0))

        # –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        remote_frame = ttk.Frame(info_frame)
        remote_frame.pack(fill="x", pady=(0, 5))
        ttk.Label(remote_frame, text="–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:", width=20).pack(side="left")
        ttk.Label(remote_frame, textvariable=self.remote_info, wraplength=400).pack(side="left", padx=(10, 0))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
        project_buttons_frame = ttk.Frame(project_frame)
        project_buttons_frame.pack(fill="x", pady=(15, 0))

        ttk.Button(project_buttons_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
                   command=self.check_project).pack(side="left", padx=(0, 10))
        ttk.Button(project_buttons_frame, text="üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
                   command=self.init_repository).pack(side="left", padx=(0, 10))
        ttk.Button(project_buttons_frame, text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ GitHub",
                   command=self.setup_remote_repository).pack(side="left")

        # 3. –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
        status_frame = ttk.LabelFrame(main_frame, text="üìã 3. –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞",
                                      padding="15")
        status_frame.pack(fill="both", expand=True, pady=(0, 15))

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        status_header_frame = ttk.Frame(status_frame)
        status_header_frame.pack(fill="x", pady=(0, 10))

        ttk.Button(status_header_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤",
                   command=self.update_file_status).pack(side="left")

        ttk.Label(status_header_frame,
                  text="üí° –°–æ–≤–µ—Ç: –ó–µ–ª–µ–Ω—ã–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∫–æ–º–º–∏—Ç—É, –∫—Ä–∞—Å–Ω—ã–µ - —Ç—Ä–µ–±—É—é—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                  foreground="gray").pack(side="right")

        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        tree_frame = ttk.Frame(status_frame)
        tree_frame.pack(fill="both", expand=True)

        self.file_tree = ttk.Treeview(tree_frame, columns=('status', 'description'), height=8)
        self.file_tree.heading('#0', text='üìÑ –§–∞–π–ª')
        self.file_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        self.file_tree.heading('description', text='–û–ø–∏—Å–∞–Ω–∏–µ')

        self.file_tree.column('#0', width=400)
        self.file_tree.column('status', width=150)
        self.file_tree.column('description', width=300)

        self.file_tree.pack(side="left", fill="both", expand=True)

        # Scrollbar –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        tree_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL,
                                       command=self.file_tree.yview)
        tree_scrollbar.pack(side="right", fill="y")
        self.file_tree.configure(yscrollcommand=tree_scrollbar.set)

        # 4. –ö–æ–º–º–∏—Ç (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
        commit_frame = ttk.LabelFrame(main_frame, text="üíæ 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–æ–º–º–∏—Ç)",
                                      padding="15")
        commit_frame.pack(fill="x", pady=(0, 15))

        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
        commit_info = ttk.Label(commit_frame,
                                text="‚ÑπÔ∏è –ö–æ–º–º–∏—Ç - —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –≤–∞—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏",
                                foreground="blue", font=('Arial', 9))
        commit_info.pack(anchor="w", pady=(0, 10))

        # –ü–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment_frame = ttk.Frame(commit_frame)
        comment_frame.pack(fill="x", pady=(0, 10))

        ttk.Label(comment_frame, text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:", font=('Arial', 10, 'bold')).pack(anchor="w")

        text_frame = ttk.Frame(comment_frame)
        text_frame.pack(fill="x", pady=(5, 0))

        self.commit_text = tk.Text(text_frame, height=3, width=50, wrap=tk.WORD)
        self.commit_text.pack(side="left", fill="x", expand=True)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        comment_buttons_frame = ttk.Frame(text_frame)
        comment_buttons_frame.pack(side="right", padx=(10, 0), fill="y")

        ttk.Button(comment_buttons_frame, text="‚ú® –ê–≤—Ç–æ-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                   command=self.auto_fill_commit_message).pack(fill="x", pady=(0, 5))
        ttk.Button(comment_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                   command=lambda: self.commit_text.delete(1.0, tk.END)).pack(fill="x")

        # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        examples_label = ttk.Label(comment_frame,
                                   text="üí° –ü—Ä–∏–º–µ—Ä—ã: '–î–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—Ö–æ–¥–∞', '–ò—Å–ø—Ä–∞–≤–∏–ª –æ—à–∏–±–∫—É –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ', '–û–±–Ω–æ–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é'",
                                   foreground="gray", font=('Arial', 8))
        examples_label.pack(anchor="w", pady=(5, 0))

        # –ö–Ω–æ–ø–∫–∏ –∫–æ–º–º–∏—Ç–∞
        commit_buttons_frame = ttk.Frame(commit_frame)
        commit_buttons_frame.pack(fill="x", pady=(15, 0))

        ttk.Button(commit_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª",
                   command=self.commit_selected_file).pack(side="left", padx=(0, 10))
        ttk.Button(commit_buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                   command=self.commit_all_changes).pack(side="left", padx=(0, 10))
        ttk.Button(commit_buttons_frame, text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ GitHub",
                   command=self.push_to_github).pack(side="left")

        # 5. –ö–æ–Ω—Å–æ–ª—å (—É–ª—É—á—à–µ–Ω–Ω–∞—è)
        console_frame = ttk.LabelFrame(main_frame, text="üì∫ 5. –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏",
                                       padding="15")
        console_frame.pack(fill="both", expand=True, pady=(0, 10))

        self.console = scrolledtext.ScrolledText(console_frame, height=12,
                                                 wrap=tk.WORD, state=tk.NORMAL,
                                                 font=('Consolas', 9))
        self.console.pack(fill="both", expand=True, pady=(0, 10))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        self.console.tag_configure('command', foreground='blue', font=('Consolas', 9, 'bold'))
        self.console.tag_configure('success', foreground='green')
        self.console.tag_configure('error', foreground='red')
        self.console.tag_configure('info', foreground='orange')

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_console_bindings()

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª—å—é
        console_buttons_frame = ttk.Frame(console_frame)
        console_buttons_frame.pack(fill="x")

        ttk.Button(console_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª",
                   command=self.clear_console).pack(side="left", padx=(0, 10))

        ttk.Label(console_buttons_frame,
                  text="üí° –í—ã–¥–µ–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç –º—ã—à—å—é –∏ –∫–æ–ø–∏—Ä—É–π—Ç–µ Ctrl+C",
                  foreground="gray", font=('Arial', 8)).pack(side="left", padx=(10, 0))

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log_message("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GitHub Helper!", 'info')
        self.log_message("–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å Git –∏ GitHub –±–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.", 'info')
        self.log_message("–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.", 'info')

    def setup_console_bindings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –∫–ª–∞–≤–∏—à –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = tk.Menu(self.console, tearoff=0)
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_selection_menu)
        self.context_menu.add_command(label="‚úÖ –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", command=self.select_all_menu)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª", command=self.clear_console)

        # –ü—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.console.bind("<Button-3>", self.show_context_menu)
        self.console.bind("<Control-c>", self.copy_selection)
        self.console.bind("<Control-a>", self.select_all)
        self.console.bind("<Key>", self.on_console_key_press)

    def on_console_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        allowed_keys = ['Control_L', 'Control_R', 'c', 'C', 'a', 'A',
                        'Left', 'Right', 'Up', 'Down', 'Home', 'End',
                        'Prior', 'Next', 'Shift_L', 'Shift_R']
        if event.keysym not in allowed_keys:
            return "break"

    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()

    def copy_selection(self, event=None):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            selected_text = self.console.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
        except tk.TclError:
            pass
        return "break"

    def copy_selection_menu(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            selected_text = self.console.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
        except tk.TclError:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    def select_all(self, event=None):
        """–í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        self.console.tag_add(tk.SEL, "1.0", tk.END)
        self.console.mark_set(tk.INSERT, "1.0")
        self.console.see(tk.INSERT)
        return "break"

    def select_all_menu(self):
        """–í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –º–µ–Ω—é"""
        self.console.tag_add(tk.SEL, "1.0", tk.END)
        self.console.mark_set(tk.INSERT, "1.0")
        self.console.see(tk.INSERT)

    def log_message(self, message, msg_type='normal'):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        timestamp = datetime.now().strftime("%H:%M:%S")

        if msg_type == 'command':
            self.console.insert(tk.END, f"\nüîß –ö–û–ú–ê–ù–î–ê: {message}\n", 'command')
        elif msg_type == 'success':
            self.console.insert(tk.END, f"[{timestamp}] ‚úÖ {message}\n", 'success')
        elif msg_type == 'error':
            self.console.insert(tk.END, f"[{timestamp}] ‚ùå {message}\n", 'error')
        elif msg_type == 'info':
            self.console.insert(tk.END, f"[{timestamp}] ‚ÑπÔ∏è {message}\n", 'info')
        else:
            self.console.insert(tk.END, f"[{timestamp}] {message}\n")

        self.console.see(tk.END)
        self.root.update_idletasks()

    def clear_console(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏"""
        self.console.delete(1.0, tk.END)
        self.log_message("–ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω", 'info')

    def run_git_command(self, command, show_command=True):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Git –∫–æ–º–∞–Ω–¥—ã"""
        if show_command:
            self.log_message(command, 'command')

        try:
            if self.project_path.get():
                os.chdir(self.project_path.get())

            result = subprocess.run(command, shell=True, capture_output=True,
                                    text=True, encoding='utf-8')

            if result.returncode == 0:
                if result.stdout.strip():
                    self.log_message(result.stdout.strip(), 'success')
                return True, result.stdout.strip()
            else:
                error_msg = result.stderr.strip()
                if not error_msg:
                    error_msg = "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
                self.log_message(error_msg, 'error')
                return False, error_msg

        except Exception as e:
            self.log_message(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}", 'error')
            return False, str(e)

    def check_git_installation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Git"""
        self.log_message("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´", 'info')
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Git –≤ —Å–∏—Å—Ç–µ–º–µ...", 'info')

        success, output = self.run_git_command("git --version")

        if success:
            self.git_status.set(f"‚úÖ {output}")
            self.log_message("Git –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", 'success')
            self.check_git_user()
        else:
            self.git_status.set("‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.log_message("Git –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞.", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –°–∫–∞—á–∞–π—Ç–µ Git —Å https://git-scm.com/", 'info')

    def check_git_user(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git"""
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git...", 'info')

        success_name, name = self.run_git_command("git config --global user.name", False)
        success_email, email = self.run_git_command("git config --global user.email", False)

        if success_name and success_email and name and email:
            self.user_info.set(f"‚úÖ {name} ({email})")
            self.log_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {name} ({email})", 'success')
        else:
            self.user_info.set("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.log_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'", 'info')

    def setup_git_user(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git"""
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setup_window = tk.Toplevel(self.root)
        setup_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git")
        setup_window.geometry("400x300")
        setup_window.transient(self.root)
        setup_window.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        setup_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))

        main_frame = ttk.Frame(setup_window, padding="20")
        main_frame.pack(fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(main_frame, text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git",
                  font=('Arial', 14, 'bold')).pack(pady=(0, 20))

        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ
        info_text = ("Git –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ –∏–º—è –∏ email –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫–æ–º–º–∏—Ç–æ–≤.\n"
                     "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        ttk.Label(main_frame, text=info_text, wraplength=350,
                  justify="left", foreground="gray").pack(pady=(0, 20))

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        ttk.Label(main_frame, text="–í–∞—à–µ –∏–º—è:", font=('Arial', 10, 'bold')).pack(anchor="w")
        name_entry = ttk.Entry(main_frame, font=('Arial', 11), width=30)
        name_entry.pack(fill="x", pady=(5, 15))

        ttk.Label(main_frame, text="–í–∞—à email:", font=('Arial', 10, 'bold')).pack(anchor="w")
        email_entry = ttk.Entry(main_frame, font=('Arial', 11), width=30)
        email_entry.pack(fill="x", pady=(5, 20))

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill="x", pady=(10, 0))

        def save_user():
            name = name_entry.get().strip()
            email = email_entry.get().strip()

            if not name or not email:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
                return

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success1, _ = self.run_git_command(f'git config --global user.name "{name}"')
            success2, _ = self.run_git_command(f'git config --global user.email "{email}"')

            if success1 and success2:
                self.user_info.set(f"‚úÖ {name} ({email})")
                self.log_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {name} ({email})", 'success')
                setup_window.destroy()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Git —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                   command=save_user).pack(side="right")
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞",
                   command=setup_window.destroy).pack(side="right", padx=(0, 10))

        # –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
        name_entry.focus()

    def show_beginner_help(self):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"""
        help_window = tk.Toplevel(self.root)
        help_window.title("üÜò –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö")
        help_window.geometry("600x500")
        help_window.transient(self.root)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
        help_text = scrolledtext.ScrolledText(help_window, wrap=tk.WORD, padx=10, pady=10)
        help_text.pack(fill="both", expand=True)

        help_content = """
üÜò –°–ü–†–ê–í–ö–ê –î–õ–Ø –ù–ê–ß–ò–ù–ê–Æ–©–ò–•

ü§î –ß–¢–û –¢–ê–ö–û–ï GIT –ò GITHUB?
Git - —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
GitHub - —ç—Ç–æ —Å–∞–π—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ

üìö –û–°–ù–û–í–ù–´–ï –ü–û–ù–Ø–¢–ò–Ø:
‚Ä¢ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π - –ø–∞–ø–∫–∞ —Å –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º Git
‚Ä¢ –ö–æ–º–º–∏—Ç - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
‚Ä¢ Push - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ GitHub
‚Ä¢ Pull - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å GitHub

üöÄ –ö–ê–ö –ù–ê–ß–ê–¢–¨ –†–ê–ë–û–¢–£:

1Ô∏è‚É£ –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö:
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Git (—Ä–∞–∑–¥–µ–ª 1)
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git (—É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ email)

2Ô∏è‚É£ –ù–û–í–´–ô –ü–†–û–ï–ö–¢:
   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ 2
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"

3Ô∏è‚É£ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–†–û–ï–ö–¢:
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ 2
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"

4Ô∏è‚É£ –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô:
   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ (—Ä–∞–∑–¥–µ–ª 3)
   ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ä–∞–∑–¥–µ–ª 4)
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"

5Ô∏è‚É£ –û–¢–ü–†–ê–í–ö–ê –ù–ê GITHUB:
   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub.com
   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –µ–≥–æ (–∫–Ω–æ–ø–∫–∞ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ GitHub")
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ GitHub"

üîó –ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç GitHub: https://github.com/join
‚Ä¢ –°–∫–∞—á–∞—Ç—å Git: https://git-scm.com/
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è GitHub: https://docs.github.com/

‚ùì –ß–ê–°–¢–´–ï –í–û–ü–†–û–°–´:
Q: –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ Git –Ω–µ –Ω–∞–π–¥–µ–Ω?
A: –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞

Q: –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub?
A: –ó–∞–π–¥–∏—Ç–µ –Ω–∞ GitHub.com ‚Üí –Ω–∞–∂–º–∏—Ç–µ "New repository"

Q: –ß—Ç–æ –ø–∏—Å–∞—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–º–º–∏—Ç—É?
A: –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∏: "–î–æ–±–∞–≤–∏–ª –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞", "–ò—Å–ø—Ä–∞–≤–∏–ª –æ—à–∏–±–∫—É"

üí° –°–û–í–ï–¢: –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ –∏ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏!
        """

        help_text.insert(tk.END, help_content)
        help_text.configure(state=tk.DISABLED)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = ttk.Button(help_window, text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ",
                                  command=help_window.destroy)
        close_button.pack(pady=10)

    def select_project_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º")
        if folder:
            self.project_path.set(folder)
            self.log_message(f"üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}", 'info')
            self.check_project()

    def check_project(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        self.log_message("üìã –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê", 'info')
        self.log_message("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É...", 'info')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
        success, output = self.run_git_command("git status", False)

        if success:
            self.log_message("‚úÖ –≠—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", 'success')

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
            success, branch = self.run_git_command("git branch --show-current", False)
            if success and branch:
                self.current_branch.set(f"‚úÖ {branch}")
                self.log_message(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {branch}", 'info')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            self.check_remote_repository()

            self.update_file_status()
        else:
            self.current_branch.set("‚ùå –ù–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
            self.remote_info.set("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.log_message("‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π' –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", 'info')

    def check_remote_repository(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        self.log_message("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é...", 'info')

        success, output = self.run_git_command("git remote -v", False)

        if success and output.strip():
            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            lines = output.strip().split('\n')
            origins = [line for line in lines if 'origin' in line and '(fetch)' in line]

            if origins:
                remote_url = origins[0].split('\t')[1].split(' ')[0]
                if 'github.com' in remote_url:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                    if remote_url.startswith('https://github.com/'):
                        repo_path = remote_url.replace('https://github.com/', '').replace('.git', '')
                    elif remote_url.startswith('git@github.com:'):
                        repo_path = remote_url.replace('git@github.com:', '').replace('.git', '')
                    else:
                        repo_path = remote_url

                    self.remote_info.set(f"‚úÖ GitHub: {repo_path}")
                    self.log_message(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ GitHub: {repo_path}", 'success')
                else:
                    self.remote_info.set(f"‚úÖ {remote_url}")
                    self.log_message(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫: {remote_url}", 'success')
            else:
                self.remote_info.set("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                self.log_message("–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", 'error')
        else:
            self.remote_info.set("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            self.log_message("–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", 'error')
            self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ GitHub'", 'info')

    def setup_remote_repository(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é"""
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        setup_window = tk.Toplevel(self.root)
        setup_window.title("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub")
        setup_window.geometry("500x400")
        setup_window.transient(self.root)
        setup_window.grab_set()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        setup_window.geometry("+%d+%d" % (
            self.root.winfo_rootx() + 50,
            self.root.winfo_rooty() + 50
        ))

        main_frame = ttk.Frame(setup_window, padding="20")
        main_frame.pack(fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(main_frame, text="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub",
                  font=('Arial', 14, 'bold')).pack(pady=(0, 20))

        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ
        info_text = ("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥ –Ω–∞ GitHub, –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π\n"
                     "—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –Ω–∞ GitHub.")
        ttk.Label(main_frame, text=info_text, wraplength=450,
                  justify="left", foreground="gray").pack(pady=(0, 20))

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction_frame = ttk.LabelFrame(main_frame, text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", padding="10")
        instruction_frame.pack(fill="x", pady=(0, 20))

        instruction_text = ("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ GitHub.com\n"
                            "2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (New repository)\n"
                            "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n"
                            "4. –í—Å—Ç–∞–≤—å—Ç–µ URL –≤ –ø–æ–ª–µ –Ω–∏–∂–µ")
        ttk.Label(instruction_frame, text=instruction_text,
                  justify="left").pack(anchor="w")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è GitHub
        ttk.Button(instruction_frame, text="üåê –û—Ç–∫—Ä—ã—Ç—å GitHub.com",
                   command=lambda: webbrowser.open("https://github.com/new")).pack(pady=(10, 0))

        # –ü–æ–ª–µ –¥–ª—è URL
        ttk.Label(main_frame, text="URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub:",
                  font=('Arial', 10, 'bold')).pack(anchor="w")

        url_frame = ttk.Frame(main_frame)
        url_frame.pack(fill="x", pady=(5, 10))

        url_entry = ttk.Entry(url_frame, font=('Arial', 10))
        url_entry.pack(fill="x")
        url_entry.insert(0, "https://github.com/username/repository.git")

        # –ü—Ä–∏–º–µ—Ä URL
        ttk.Label(main_frame,
                  text="üí° –ü—Ä–∏–º–µ—Ä: https://github.com/username/my-project.git",
                  foreground="gray", font=('Arial', 9)).pack(anchor="w", pady=(0, 20))

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill="x", pady=(10, 0))

        def connect_repository():
            url = url_entry.get().strip()

            if not url or url == "https://github.com/username/repository.git":
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            self.log_message(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: {url}", 'info')

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π origin –µ—Å–ª–∏ –µ—Å—Ç—å
            self.run_git_command("git remote remove origin", False)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π origin
            success, output = self.run_git_command(f'git remote add origin "{url}"')

            if success:
                self.log_message("‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!", 'success')
                self.check_remote_repository()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                setup_window.destroy()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ GitHub!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:\n{output}")

        ttk.Button(buttons_frame, text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å",
                   command=connect_repository).pack(side="right")
        ttk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞",
                   command=setup_window.destroy).pack(side="right", padx=(0, 10))

        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ URL
        url_entry.focus()
        url_entry.select_range(0, tk.END)

    def init_repository(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        if not self.project_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!")
            return

        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ?")
        if not result:
            return

        self.log_message("üöÄ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø", 'info')
        self.log_message("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", 'info')

        success, output = self.run_git_command("git init")

        if success:
            self.log_message("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", 'success')
            self.current_branch.set("‚úÖ main (–Ω–æ–≤—ã–π)")

            # –°–æ–∑–¥–∞–µ–º .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            gitignore_path = os.path.join(self.project_path.get(), '.gitignore')
            if not os.path.exists(gitignore_path):
                try:
                    with open(gitignore_path, 'w', encoding='utf-8') as f:
                        gitignore_content = """# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
*.tmp
*.temp
*~

# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
.DS_Store
Thumbs.db
desktop.ini

# –§–∞–π–ª—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
.vscode/
.idea/
*.swp
*.swo

# Python
__pycache__/
*.py[cod]
*.so
.env
venv/
env/

# Node.js
node_modules/
npm-debug.log*

# Java
*.class
*.jar
target/

# C#
bin/
obj/
*.exe
"""
                        f.write(gitignore_content)
                    self.log_message("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .gitignore —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏", 'success')
                except Exception as e:
                    self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å .gitignore: {e}", 'error')

            # –°–æ–∑–¥–∞–µ–º README.md –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            readme_path = os.path.join(self.project_path.get(), 'README.md')
            if not os.path.exists(readme_path):
                try:
                    project_name = os.path.basename(self.project_path.get())
                    with open(readme_path, 'w', encoding='utf-8') as f:
                        readme_content = f"""# {project_name}

–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

## –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

1. –û–ø–∏—à–∏—Ç–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç
2. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
3. –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ

## –ê–≤—Ç–æ—Ä

–í–∞—à–µ –∏–º—è

## –õ–∏—Ü–µ–Ω–∑–∏—è

MIT License
"""
                        f.write(readme_content)
                    self.log_message("üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª README.md —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π", 'success')
                except Exception as e:
                    self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å README.md: {e}", 'error')

            self.update_file_status()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                                         "–°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:\n"
                                         "‚Ä¢ .gitignore (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã)\n"
                                         "‚Ä¢ README.md (–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞)")

    def update_file_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–æ–≤"""
        if not self.project_path.get():
            return

        self.log_message("üìã –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –§–ê–ô–õ–û–í", 'info')
        self.log_message("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ...", 'info')

        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        for item in self.file_tree.get_children():
            self.file_tree.delete(item)

        success, output = self.run_git_command("git status --porcelain", False)

        if success and output:
            lines = output.strip().split('\n')
            for line in lines:
                if len(line) >= 3:
                    status_code = line[:2]
                    filename = line[3:]

                    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                    status_text, description = self.decode_git_status_detailed(status_code)

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–µ—Ä–µ–≤–æ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    item_id = self.file_tree.insert('', 'end', text=filename,
                                                    values=(status_text, description))

                    # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –≤–æ –≤—Å–µ—Ö —Ç–µ–º–∞—Ö)
                    if status_code.startswith('M ') or status_code.startswith('A '):
                        self.file_tree.set(item_id, 'status', f"üü¢ {status_text}")
                    elif status_code == '??':
                        self.file_tree.set(item_id, 'status', f"üî¥ {status_text}")
                    elif status_code.startswith(' M') or status_code.startswith(' A'):
                        self.file_tree.set(item_id, 'status', f"üü° {status_text}")
                    else:
                        self.file_tree.set(item_id, 'status', f"‚ö™ {status_text}")

            self.log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(lines)} —Ñ–∞–π–ª–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏", 'info')
        else:
            self.log_message("‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è - –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π", 'success')

    def decode_git_status_detailed(self, code):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–∞ Git"""
        status_map = {
            'M ': ('–ì–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É', '–ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ staging area'),
            ' M': ('–ò–∑–º–µ–Ω–µ–Ω', '–§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–º–∏—Ç–∞'),
            'A ': ('–ì–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É', '–ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ staging area'),
            ' A': ('–î–æ–±–∞–≤–ª–µ–Ω', '–ù–æ–≤—ã–π —Ñ–∞–π–ª, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–º–∏—Ç–∞'),
            'D ': ('–ì–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É', '–§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É'),
            ' D': ('–£–¥–∞–ª–µ–Ω', '–§–∞–π–ª —É–¥–∞–ª–µ–Ω, –Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ'),
            '??': ('–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è', '–ù–æ–≤—ã–π —Ñ–∞–π–ª, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –≤ Git'),
            'R ': ('–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω', '–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É'),
            'C ': ('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω', '–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É'),
            'MM': ('–ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤', '–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ staging –∏ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏'),
            'AM': ('–ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤', '–ù–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏'),
        }

        result = status_map.get(code, (f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({code})', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞'))
        return result[0], result[1]

    def auto_fill_commit_message(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        self.log_message("‚ú® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...", 'info')

        now = datetime.now()
        date_str = now.strftime("%Y-%m-%d %H:%M")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
        success, output = self.run_git_command("git diff --stat", False)

        message = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç {date_str}"

        if success and output:
            lines = output.strip().split('\n')
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É)
            files_lines = [l for l in lines if '|' in l]
            files_changed = len(files_lines)

            if files_changed > 0:
                message = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - –∏–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_changed}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
        success, status_output = self.run_git_command("git status --porcelain", False)
        if success and status_output:
            new_files = len([l for l in status_output.split('\n') if l.startswith('??')])
            modified_files = len([l for l in status_output.split('\n') if ' M' in l or 'M ' in l])

            details = []
            if new_files > 0:
                details.append(f"–¥–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {new_files}")
            if modified_files > 0:
                details.append(f"–∏–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {modified_files}")

            if details:
                message = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - {', '.join(details)}"

        self.commit_text.delete(1.0, tk.END)
        self.commit_text.insert(1.0, message)

        self.log_message(f"üìù –°–æ–∑–¥–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message}", 'success')

    def commit_selected_file(self):
        """–ö–æ–º–º–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        selection = self.file_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–º–º–∏—Ç–∞!")
            return

        filename = self.file_tree.item(selection[0])['text']
        commit_message = self.commit_text.get(1.0, tk.END).strip()

        if not commit_message:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
            return

        self.log_message(f"üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –§–ê–ô–õ–ê: {filename}", 'info')
        self.log_message("–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç...", 'info')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ staging area
        success, output = self.run_git_command(f'git add "{filename}"')

        if success:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            success, output = self.run_git_command(f'git commit -m "{commit_message}"')

            if success:
                self.log_message(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", 'success')
                self.update_file_status()
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Git!")
        else:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞", 'error')

    def commit_all_changes(self):
        """–ö–æ–º–º–∏—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        commit_message = self.commit_text.get(1.0, tk.END).strip()

        if not commit_message:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
            return

        self.log_message("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –ò–ó–ú–ï–ù–ï–ù–ò–ô", 'info')
        self.log_message("–î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç...", 'info')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        success, output = self.run_git_command("git status --porcelain", False)

        if not success or not output.strip():
            self.log_message("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", 'info')
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        success, output = self.run_git_command("git add .")

        if success:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            success, output = self.run_git_command(f'git commit -m "{commit_message}"')

            if success:
                self.log_message("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", 'success')
                self.update_file_status()

                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                self.commit_text.delete(1.0, tk.END)

                messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Git!")
            else:
                if "nothing to commit" in output.lower():
                    self.log_message("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", 'info')
                    messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
        else:
            self.log_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤", 'error')

    def push_to_github(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ GitHub"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        if "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω" in self.remote_info.get() or "‚ùå" in self.remote_info.get():
            result = messagebox.askyesno("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
                                         "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n"
                                         "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ GitHub —Å–µ–π—á–∞—Å?")
            if result:
                self.setup_remote_repository()
                return
            else:
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        success, output = self.run_git_command("git log --oneline -1", False)
        if not success or not output.strip():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                   "–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!\n"
                                   "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            return

        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                     "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ GitHub?\n\n"
                                     "–≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º—ã–º–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.")

        if not result:
            return

        self.log_message("üöÄ –û–¢–ü–†–ê–í–ö–ê –ù–ê GITHUB", 'info')
        self.log_message("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", 'info')

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
        success, branch = self.run_git_command("git branch --show-current", False)

        if success and branch:
            # Push –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            success, output = self.run_git_command(f"git push origin {branch}")

            if success:
                self.log_message("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub!", 'success')

                # –ü–æ–ª—É—á–∞–µ–º URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                success_remote, remote_output = self.run_git_command("git remote get-url origin", False)
                if success_remote and remote_output:
                    repo_url = remote_output.strip().replace('.git', '')
                    if not repo_url.startswith('http'):
                        repo_url = repo_url.replace('git@github.com:', 'https://github.com/')

                    result = messagebox.askyesno("–£—Å–ø–µ—Ö",
                                                 f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub!\n\n"
                                                 f"–•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –±—Ä–∞—É–∑–µ—Ä–µ?")
                    if result:
                        webbrowser.open(repo_url)
                else:
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub!")
            else:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {output}", 'error')

                # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
                if "No such remote 'origin'" in output:
                    self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", 'info')
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n"
                                                   "–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ GitHub'")
                elif "Permission denied" in output or "access" in output.lower():
                    self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞", 'info')
                    self.log_message("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:", 'info')
                    self.log_message("‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞", 'info')
                    self.log_message("‚Ä¢ –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", 'info')
                    self.log_message("‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–ª—é—á–∞", 'info')

                    messagebox.showerror("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞",
                                         "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!\n\n"
                                         "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                                         "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å\n"
                                         "‚Ä¢ –ù—É–∂–µ–Ω Personal Access Token\n"
                                         "‚Ä¢ –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
                elif "nothing to push" in output:
                    self.log_message("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", 'info')
                    messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!")
                elif "failed to push" in output.lower():
                    self.log_message("üí° –†–ï–®–ï–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", 'info')
                    result = messagebox.askyesno("–ö–æ–Ω—Ñ–ª–∏–∫—Ç",
                                                 "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n"
                                                 "–í–æ–∑–º–æ–∂–Ω–æ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n"
                                                 "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É?\n"
                                                 "(–í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)")
                    if result:
                        success, output = self.run_git_command(f"git push origin {branch} --force")
                        if success:
                            self.log_message("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", 'success')
                            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub!")
                        else:
                            self.log_message(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {output}", 'error')
                else:
                    self.log_message("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 'info')
        else:
            self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É", 'error')


def main():
    root = tk.Tk()
    app = GitHubHelper(root)
    root.mainloop()


if __name__ == "__main__":
    main()